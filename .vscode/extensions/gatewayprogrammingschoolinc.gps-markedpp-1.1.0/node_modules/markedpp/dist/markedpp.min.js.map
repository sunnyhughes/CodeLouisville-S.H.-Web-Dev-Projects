{"version":3,"sources":["webpack://markedpp/webpack/universalModuleDefinition","webpack://markedpp/webpack/bootstrap","webpack://markedpp/./src/defaults.js","webpack://markedpp/./src/InlineLexer.js","webpack://markedpp/./src/rules.js","webpack://markedpp/./src/Renderer.js","webpack://markedpp/./src/Numbering.js","webpack://markedpp/./src/anchorSlugger.js","webpack://markedpp/./node_modules/html-entities/lib/html5-entities.js","webpack://markedpp/./src/browser.js","webpack://markedpp/./src/ppInclude-browser.js","webpack://markedpp/./src/markedpp.js","webpack://markedpp/./src/Lexer.js","webpack://markedpp/./src/utils.js","webpack://markedpp/./src/Parser.js","webpack://markedpp/./src/Anchor.js","webpack://markedpp/./node_modules/emoji-regex/index.js","webpack://markedpp/./node_modules/html-entities/index.js","webpack://markedpp/./node_modules/html-entities/lib/xml-entities.js","webpack://markedpp/./node_modules/html-entities/lib/html4-entities.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","gfm","include","toc","numberedheadings","ref","breaks","tags","level","minlevel","smartlists","autonumber","autoid","marked","markdownit","unified","pandoc","github","gitlab","bitbucket","ghost","inline","require","defaults","InlineLexer","options","this","tokens","rules","assign","opts","lex","src","cap","escape","exec","substring","length","push","type","text","inLink","url","tag","link","raw","href","title","reflink","nolink","strong","char","em","code","br","del","Error","charCodeAt","noop","replace","regex","opt","source","self","val","RegExp","block","newline","fences","hr","heading","lheading","headingid","blockquote","list","html","def","table","paragraph","ppinclude","ppnumberedheadings","pptoc","ppref","item","bullet","_tag","preproc","_ppopts_","_ppinclude_","_ppincludeCompat_","_ppnumberedheadings_","_pptoc_","_pptocCompat1_","_pptocCompat2_","_pptocCompat3_","_ppref_","_pprefCompat1_","_pprefCompat2_","autolink","_inside","_href","Numbering","Renderer","number","anchor","atx","body","listitem","indent","lang","fence","reference","codeblock","label","image","refimage","noimage","chars","sortByTitle","a","b","_a","toLowerCase","_b","references","refs","out","map","sort","forEach","join","tableOfContents","omitlevel","_this","joinOpts","numbered","omit","numbering","renderLink","sanitizeHeadings","filter","depth","numberedHeadings","count","undefined","some","tt","space","maxLevel","minLevel","skip","start","obj","tmp","Array","isArray","init","_","last","reset","emojiRegex","entities","Entities","AllHtmlEntities","MODE","BITBUCKET","GHOST","GITHUB","GITLAB","MARKDOWNIT","MARKED","PANDOC","UNIFIED","RE_CJK","RE_ENTITIES","RE_SPECIALS_DOT","RE_SPECIALS","basicGithubId","getGithubId","getBitbucketId","_m","normalize","getGhostId","decode","getGitlabId","getPandocId","trim","test","getMarkedId","slugger","header","encodeURIComponent","input","result","asciiOnlyToLowerCase","encodeURI","ENTITIES","alphaIndex","charIndex","Html5Entities","_results","charInfo","e","alpha","chr","addChar","chr2","String","fromCharCode","createIndexes","str","entity","charAt","parseInt","substr","isNaN","encode","strLength","encodeNonUTF","encodeNonASCII","ppInclude","markedpp","path","normalizeArray","parts","allowAboveRoot","up","splice","unshift","resolve","resolvedPath","resolvedAbsolute","arguments","split","splitPathRe","splitPath","filename","slice","dirname","dir","async","_eachLimit","limit","arr","iterator","callback","completed","started","running","replenish","err","eachLimit","fn","Lexer","location","pathname","lexed","_options","token","done","path_","req","XMLHttpRequest","method","params","data","queryString","open","setRequestHeader","headers","onreadystatechange","readyState","status","responseText","send","console","log","xhr","protocol","host","message","lexer","sep","ntokens","_tokens","Parser","parse","int","repeat","KEY","KEYVALUE","KEYVALUES","top","bull","next","loose","splitOpts","ordered","match","indexOf","pedantic","bq","range","pre","x","min","max","undef","num","times","ret","Anchor","REMOVENUMBER","renderer","anchorMode","k","_anchors","updateAutoIdentifier","tok","peek","uniq","headingAutoId","inlineText","includes","getInlineAnchorText","inc","_this2","headings","prep","id","_this3","omitMatch","skipFlag","_this4","inlinetok","toString","JSON","stringify","_classCallCheck","_counters","_mode","_startCnt","_fn","_len","args","_key","_inc","apply","concat","_len2","_key2","_len3","_key3","isInc","cnt","XmlEntities","Html4Entities","ALPHA_INDEX","&lt","&gt","&quot","&apos","&amp","&lt;","&gt;","&quot;","&apos;","&amp;","CHAR_INDEX","60","62","34","39","38","CHAR_S_INDEX","<",">","\"","'","&","strLenght","HTML_ALPHA","HTML_CODES","numIndex","cc"],"mappings":"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","file":"markedpp.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"markedpp\"] = factory();\n\telse\n\t\troot[\"markedpp\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","/*\n* default values\n*/\nconst defaults = {\n  gfm: true, // consider gfm fences\n  include: true, // enable !includes\n  toc: true, // enable !toc\n  numberedheadings: true, // enable !numberedheadings\n  ref: true, // enable !ref\n\n  breaks: true, // render <br> tags for Table of Contents with numbered style\n  tags: true, // render pre-proc tags <!-- !command -->\n  level: 3, // default level for !toc and !numberheadings\n  minlevel: 1, // default minlevel for !toc and !numberheadings\n  smartlists: false, // add newline on joined bullet lists using different bullet chars\n\n  autonumber: true, // renumber lists\n  autoid: false, // update identifiers on headings automatically (adds <a name=> anchors)\n  // anchor mode for heading auto identifiers\n  marked: true,\n  markdownit: false,\n  unified: false, // same as github\n  pandoc: false,\n  github: false,\n  gitlab: false,\n  bitbucket: false,\n  ghost: false\n}\n\nmodule.exports = defaults\n","const { inline } = require('./rules')\nconst defaults = require('./defaults')\n\n/**\n* Inline Lexer\n* @constructor\n*/\nfunction InlineLexer (options) {\n  this.tokens = []\n  this.options = options || defaults\n  this.rules = inline\n  if (this.options.gfm) {\n    Object.assign(this.rules, inline.opts.gfm)\n  }\n  if (this.options.breaks) {\n    Object.assign(this.rules, inline.opts.gfm, inline.opts.breaks)\n  }\n}\n\n/**\n* Expose Inline Rules\n*/\nInlineLexer.rules = inline\n\n/**\n* Static Lexing\n*/\nInlineLexer.lex = function (src, options) {\n  const inline = new InlineLexer(options)\n  return inline.lex(src)\n}\n\n/**\n* Lexing\n*/\nInlineLexer.prototype.lex = function (src) {\n  let cap\n\n  while (src) {\n    // escape\n    if ((cap = this.rules.escape.exec(src))) {\n      src = src.substring(cap[0].length)\n      this.tokens.push({\n        type: 'escape',\n        text: cap[1]\n      })\n      continue\n    }\n    // url (gfm)\n    if (!this.inLink && (cap = this.rules.url.exec(src))) {\n      src = src.substring(cap[0].length)\n      this.tokens.push({\n        type: 'url',\n        text: cap[1]\n      })\n      continue\n    }\n    // tag\n    if ((cap = this.rules.tag.exec(src))) {\n      src = src.substring(cap[0].length)\n      this.tokens.push({\n        type: 'tag',\n        text: cap[0]\n      })\n      continue\n    }\n    // link\n    if ((cap = this.rules.link.exec(src))) {\n      src = src.substring(cap[0].length)\n      this.tokens.push({\n        type: (cap[1] ? 'image' : 'link'),\n        raw: cap[0],\n        text: cap[2],\n        href: cap[3],\n        title: cap[4]\n      })\n      continue\n    }\n    // reflink\n    if ((cap = this.rules.reflink.exec(src))) {\n      src = src.substring(cap[0].length)\n      this.tokens.push({\n        type: (cap[1] ? 'refimage' : 'reflink'),\n        raw: cap[0],\n        text: cap[2],\n        ref: cap[3]\n      })\n      continue\n    }\n    // nolink\n    if ((cap = this.rules.nolink.exec(src))) {\n      src = src.substring(cap[0].length)\n      this.tokens.push({\n        type: (cap[1] ? 'noimage' : 'nolink'),\n        raw: cap[0],\n        text: cap[2]\n      })\n      continue\n    }\n    // strong\n    if ((cap = this.rules.strong.exec(src))) {\n      src = src.substring(cap[0].length)\n      this.tokens.push({\n        type: 'strong',\n        text: cap[2] || cap[1],\n        char: /^(..)/.exec(cap[0])[0]\n      })\n      continue\n    }\n    // em\n    if ((cap = this.rules.em.exec(src))) {\n      src = src.substring(cap[0].length)\n      this.tokens.push({\n        type: 'em',\n        text: cap[2] || cap[1],\n        char: /^(.)/.exec(cap[0])[0]\n      })\n      continue\n    }\n    // code\n    if ((cap = this.rules.code.exec(src))) {\n      src = src.substring(cap[0].length)\n      this.tokens.push({\n        type: 'code',\n        text: cap[0]\n      })\n      continue\n    }\n    // br\n    if ((cap = this.rules.br.exec(src))) {\n      src = src.substring(cap[0].length)\n      this.tokens.push({\n        type: 'br',\n        text: cap[0]\n      })\n      continue\n    }\n    // del (gfm)\n    if ((cap = this.rules.del.exec(src))) {\n      src = src.substring(cap[0].length)\n      this.tokens.push({\n        type: 'del',\n        text: cap[1]\n      })\n      continue\n    }\n    // text\n    if ((cap = this.rules.text.exec(src))) {\n      src = src.substring(cap[0].length)\n      this.tokens.push({\n        type: 'text',\n        text: cap[0]\n      })\n      continue\n    }\n    // no match\n    if (src) {\n      throw new\n      Error('Infinite loop on byte: ' + src.charCodeAt(0))\n    }\n  }\n\n  return this.tokens\n}\n\nmodule.exports = InlineLexer\n","/* eslint-disable func-call-spacing, no-unexpected-multiline */\n\nfunction noop () {}\nnoop.exec = noop\n\nfunction replace (regex, opt) {\n  regex = regex.source\n  opt = opt || ''\n  return function self (name, val) {\n    if (!name) return new RegExp(regex, opt)\n    val = val.source || val\n    val = val.replace(/(^|[^[])\\^/g, '$1')\n    regex = regex.replace(name, val)\n    return self\n  }\n}\n\n/*\n * block lexer rules\n */\nconst block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: noop,\n  hr: /^( *[-*_]){3,} *(?:\\n+|$)/,\n  heading: /^headingid *(#{1,6}) *([^\\n]+?) *#* *(?:\\n|$)/,\n  lheading: /^headingid([^\\n]+)\\n *(=|-){2,} *(?:\\n|$)/,\n  headingid: /(?: *<a name=\"([^\"]+)\" *(?:\\/>|> *<\\/a>|>) *\\n{1,2})?/,\n  blockquote: /^( *>[^\\n]+(\\n(?!def)[^\\n]+)*)+(?:\\n|$)/,\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n?|\\s*$)/,\n  html: /^ *(?:comment *(?:\\n|\\s*$)|closed *(?:\\n{2,}|\\s*$)|closing *(?:\\n{2,}|\\s*$))/,\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +[\"(]([^\\n]+)[\")])? *(?:\\n|$)/,\n  table: noop,\n  // ~ paragraph: /^((?:[^\\n]+\\n?(?!hr|heading|lheading|blockquote|list|tag|def))+)\\n*/, // TODO - ok according to commonmark\n  paragraph: /^((?:[^\\n]+\\n?(?!hr|heading|lheading|blockquote|tag|def))+)\\n*/,\n  text: /^[^\\n]+/,\n  // ----\n  ppinclude: noop,\n  ppnumberedheadings: noop,\n  pptoc: noop,\n  ppref: noop\n}\n\n// join the rules\nblock.bullet = /(?:[*+-]|\\d+\\.)/\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/\nblock.item = replace(block.item, 'gm')\n(/bull/g, block.bullet)\n()\n\nblock.list = replace(block.list)\n(/bull/g, block.bullet)\n('hr', '\\\\n+(?=\\\\1?(?:[-*_] *){3,}(?:\\\\n+|$))')\n('def', '\\\\n+(?=' + block.def.source + ')')\n()\n\nblock.blockquote = replace(block.blockquote)\n('def', block.def)\n()\n\nblock.heading = replace(block.heading)\n('headingid', block.headingid)\n()\nblock.lheading = replace(block.lheading)\n('headingid', block.headingid)\n()\n\n// list of allowed tags - TODO\n// ~ block._tag = '(?!(?:' +\n// ~ 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code' +\n// ~ '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo' +\n// ~ '|span|br|wbr|ins|del|img|x-[a-z]+)\\\\b)\\\\w+(?!:/|[^\\\\w\\\\s@]*@)\\\\b';\n\n// allow all tags\nblock._tag = '(?!(?:[A-Za-z][A-Za-z-]*)\\\\b)\\\\w+(?!:/|[^\\\\w\\\\s@]*@)\\\\b'\n\nblock.html = replace(block.html)\n('comment', /<!--[\\s\\S]*?-->/)\n('closed', /<(tag)[\\s\\S]+?<\\/\\1>/)\n('closing', /<tag(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/)\n(/tag/g, block._tag)\n()\n\nblock.paragraph = replace(block.paragraph)\n('hr', block.hr)\n('heading', block.heading)\n('lheading', block.lheading)\n('blockquote', block.blockquote)\n// ~ ('list', block.list) // TODO - ok according to commonmark\n('tag', '<' + block._tag)\n('def', block.def)\n()\n\nblock.opts = {}\n\nblock.opts.gfm = {\n  fences: /^( *)(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\2 *(?:\\n|$)/\n}\n\n/*\n * preprocessor rules\n */\nconst preproc = {\n  _ppopts_: / ?(?:\\(([^)]+)\\))?/,\n\n  ppinclude: /^( *)(?:!(?:include)_ppopts_|_ppinclude_|_ppincludeCompat_) *(?:\\n|$)/,\n  _ppinclude_: /<!-- *include_ppopts_ *-->(?:(?!<!-- *\\/include * -->)[^])*<!-- *\\/include * -->/,\n  _ppincludeCompat_: /!INCLUDE \"([^\"]+)\"/,\n\n  ppnumberedheadings: /^ *(?:!(?:numberedheadings)_ppopts_|_ppnumberedheadings_) *(?:\\n+|$)/,\n  _ppnumberedheadings_: /<!-- !*numberedheadings_ppopts_ *-->/,\n\n  pptoc: /^(?:!(?:toc)_ppopts_|_pptoc_|_pptocCompat1_|_pptocCompat2_|_pptocCompat3_) *(?:\\n+|$)/,\n  _pptoc_: /<!-- *!toc_ppopts_ *-->(?:(?!<!-- *toc! * -->)[^])*<!-- *toc! * -->/,\n  _pptocCompat1_: /!TOC/,\n  _pptocCompat2_: /<!-- *toc *-->(?:(?!<!-- *(?:\\/toc|toc stop) * -->)[^])*<!-- *(?:\\/toc|toc stop) * -->/, // marked-toc, markdown-pp syntax\n  _pptocCompat3_: /<!-- *toc *-->/,\n\n  ppref: /^(?:!(?:ref)|_ppref_|_pprefCompat1_|_pprefCompat2_) *(?:\\n|$)/,\n  _ppref_: /<!-- *!ref *-->(?:(?!<!-- *ref! * -->)[^])*<!-- *ref! * -->/,\n  _pprefCompat1_: /!REF/,\n  _pprefCompat2_: /<!-- *ref *-->(?:(?!<!-- *\\/ref * -->)[^])*<!-- \\/ref * -->/\n}\n\npreproc.ppinclude = replace(preproc.ppinclude)\n('_ppinclude_', preproc._ppinclude_)\n('_ppincludeCompat_', preproc._ppincludeCompat_)\n('_ppopts_', preproc._ppopts_)\n('_ppopts_', preproc._ppopts_)\n()\npreproc.ppnumberedheadings = replace(preproc.ppnumberedheadings)\n('_ppnumberedheadings_', preproc._ppnumberedheadings_)\n('_ppopts_', preproc._ppopts_)\n('_ppopts_', preproc._ppopts_)\n()\npreproc.pptoc = replace(preproc.pptoc)\n('_pptoc_', preproc._pptoc_)\n('_ppopts_', preproc._ppopts_)\n('_ppopts_', preproc._ppopts_)\n('_pptocCompat1_', preproc._pptocCompat1_)\n('_pptocCompat2_', preproc._pptocCompat2_)\n('_pptocCompat3_', preproc._pptocCompat3_)\n()\npreproc.ppref = replace(preproc.ppref)\n('_ppref_', preproc._ppref_)\n('_pprefCompat1_', preproc._pprefCompat1_)\n('_pprefCompat2_', preproc._pprefCompat2_)\n()\n\nblock.opts.include = {\n  ppinclude: preproc.ppinclude\n}\nblock.opts.numberedheadings = {\n  ppnumberedheadings: preproc.ppnumberedheadings\n}\nblock.opts.toc = {\n  pptoc: preproc.pptoc\n}\nblock.opts.ref = {\n  ppref: preproc.ppref\n}\n\n/*\n * inline lexer rules\n */\nconst inline = {\n  escape: /^\\\\([\\\\`*{}[\\]()#+\\-.!_>])/,\n  autolink: /^<([^ >]+(@|:\\/)[^ >]+)>/,\n  url: noop,\n  tag: /^<!--[\\s\\S]*?-->|^<\\/?\\w+(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/,\n  link: /^(!)?\\[(inside)\\]\\(href\\)/,\n  reflink: /^(!)?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/,\n  nolink: /^(!)?\\[((?:\\[[^\\]]*\\]|[^[\\]])*)\\]/,\n  strong: /^__([\\s\\S]+?)__(?!_)|^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/,\n  em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n  code: /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n  br: /^ {2,}\\n(?!\\s*$)/,\n  del: noop,\n  text: /^[\\s\\S]+?(?=[\\\\<![_*`]| {2,}\\n|$)/,\n  _inside: /(?:\\[[^\\]]*\\]|[^[\\]]|\\](?=[^[]*\\]))*/,\n  _href: /\\s*<?([\\s\\S]*?)>?(?:\\s+(['\"][\\s\\S]*?['\"]))?\\s*/\n}\n\ninline.link = replace(inline.link)\n('inside', inline._inside)\n('href', inline._href)\n()\n\ninline.reflink = replace(inline.reflink)\n('inside', inline._inside)\n()\n\ninline.opts = {}\n\ninline.opts.gfm = {\n  escape: replace(inline.escape)('])', '~|])')(),\n  url: /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\n  del: /^~~(?=\\S)([\\s\\S]*?\\S)~~/,\n  text: replace(inline.text)\n  (']|', '~]|')\n  ('|', '|https?://|')\n  ()\n}\n\ninline.opts.breaks = {\n  br: replace(inline.br)('{2,}', '*')(),\n  text: replace(inline.opts.gfm.text)('{2,}', '*')()\n}\n\nmodule.exports = {\n  block,\n  inline\n}\n\n// if (typeof require !== \"undefined\" && require.main === module) console.log(block); // TODO - debugging\n","const Numbering = require('./Numbering')\nconst defaults = require('./defaults')\n\n/**\n * Renderer\n * @constructor\n * @param {Object} options\n */\nfunction Renderer (options) {\n  this.options = options || {}\n}\n\n/// / ---- block level\n\n/**\n * Render heading as markdown\n * @param {String} text - Heading text\n * @param {Number} level - Heading level\n * @param {String} raw - Raw heading text (without numbers)\n * @return {String} rendered output\n */\nRenderer.prototype.heading = function (text, level, raw, number, autoid, anchor) {\n  let atx = ''\n  if (anchor) {\n    atx += '<a name=\"' + anchor + '\"></a>\\n\\n'\n  } else if (this.options.autoid && autoid) {\n    atx += '<a name=\"' + autoid + '\"></a>\\n\\n'\n  }\n  atx += '########'.substring(0, level)\n  return atx + ' ' + text + '\\n'\n}\n\n/**\n * Render text\n * @param {String} text - text\n * @return {String} rendered output\n */\nRenderer.prototype.paragraph = function (text) {\n  return text // TODO\n}\n\n/**\n * Render newline `<br>`\n * @param {String} text - text\n * @return {String} rendered output\n */\nRenderer.prototype.newline = function (text) {\n  return text\n}\n\n/**\n * Renders a blockquote\n * @param {String} body - body of blockquote\n * @return {String} rendered output\n */\nRenderer.prototype.blockquote = function (body) {\n  // ~ return body.replace(/\\n/gm, '\\n> ');\n  return body.replace(/\\n$/, '').replace(/^/gm, '> ') + '\\n'\n}\n\n/**\n * Renders a list\n * @param {String} body - body of list\n * @return {String} rendered output\n */\nRenderer.prototype.list = function (body /*, ordered */) {\n  return body.replace(/\\n$/, '')\n}\n\n/**\n * Renders a listitem\n * @param {String} bullet - bullet char\n * @param {String} text - text of listitem\n * @return {String} rendered output\n */\nRenderer.prototype.listitem = function (bullet, text) {\n  let indent = ''\n  bullet += ' '\n  for (let i = 0; i < bullet.length; i++) {\n    indent += ' '\n  }\n  return bullet + text.replace(/\\n(?!\\n|$)/gm, '\\n' + indent) + '\\n'\n}\n\n/**\n * Render fenced code blocks\n * @param {String} code - code block\n * @param {String} lang - language of code block\n * @return {String} rendered output\n */\nRenderer.prototype.fences = function (code, lang, indent, fences) {\n  return this.fence(lang, indent, fences) + code + '\\n' + this.fence('', indent, fences)\n}\n\n/**\n * Render a single reference as markdown\n * @param {String} ref - reference name\n * @param {String} href - URL of reference\n * @param {String} title - Title of reference\n * @return {String} rendered output\n */\nRenderer.prototype.reference = function (ref, href, title) {\n  return '[' + ref + ']: ' + href + (title ? ' \"' + title + '\"' : '') + '\\n'\n}\n\n/**\n * Render a ppinclude which could not be resolved\n * @param {String} text - text\n * @param {String} indent - indent as whitespaces string\n * @param {String} lang - language of included file\n * @return {String} rendered output\n */\nRenderer.prototype.include = function (text, indent, lang) {\n  return indent + '!include (' + text + (lang ? ' lang=' + lang : '') + ')\\n'\n}\n\n/**\n * Render GFM fences\n * @param {String} lang - language of fences block\n * @return rendered output\n */\nRenderer.prototype.fence = function (lang, indent, fences) {\n  fences = fences || '```'\n  indent = indent || ''\n  return indent + fences + (lang || '') + '\\n'\n}\n\n/**\n * Render codeblock\n * @param {String} text - text\n * @return rendered output\n */\nRenderer.prototype.codeblock = function (text) {\n  return text\n}\n/**\n * Render html\n * @param {String} text - text\n * @return rendered output\n */\nRenderer.prototype.html = function (text) {\n  return text\n}\n/**\n * Render horizontal ruler\n * @param {String} text - text\n * @return rendered output\n */\nRenderer.prototype.hr = function (text) {\n  return text\n}\n\n/// / ---- inline level\n\nRenderer.prototype.escape = function (text) {\n  return '\\\\' + text\n}\nRenderer.prototype.url = function (text) {\n  return text\n}\nRenderer.prototype.tag = function (text) {\n  return text\n}\nRenderer.prototype.link = function (text, label, href, title) {\n  return '[' + label + '](' + href + (title ? ' ' + title : '') + ')'\n}\nRenderer.prototype.reflink = function (text, label, ref) {\n  return '[' + label + '][' + ref + ']'\n}\nRenderer.prototype.nolink = function (text, label) {\n  return '[' + label + ']'\n}\nRenderer.prototype.image = function (text, label, href, title) {\n  return '!' + this.link(text, label, href, title)\n}\nRenderer.prototype.refimage = function (text, label, ref) {\n  return '!' + this.reflink(text, label, ref)\n}\nRenderer.prototype.noimage = function (text, label) {\n  return '!' + this.nolink(text, label)\n}\nRenderer.prototype.strong = function (text, chars) {\n  return chars + text + chars\n}\nRenderer.prototype.em = function (text, char) {\n  return char + text + char\n}\nRenderer.prototype.del = function (text) {\n  return '~~' + text + '~~'\n}\nRenderer.prototype.text = function (text) {\n  return text\n}\nRenderer.prototype.br = function (text) {\n  return text\n}\nRenderer.prototype.code = function (text) {\n  return text\n}\n\n/**\n * Sorter to sort reference by title\n * @api private\n */\nRenderer.sortByTitle = function (a, b) {\n  const _a = a.title.toLowerCase()\n  const _b = b.title.toLowerCase()\n\n  if (_a > _b) {\n    return 1\n  } else if (_a < _b) {\n    return -1\n  } else {\n    return 0\n  }\n}\n\n/**\n * Render all references\n * @param {Array} refs : Array of Objects `{ ref: {String}, href: {String}, title: {String} }`\n * @return {String} rendered output\n */\nRenderer.prototype.references = function (refs) {\n  const out = []\n\n  refs.map(ref => {\n    if (!ref.title) {\n      ref.title = ref.ref\n    }\n    return ref\n  }).sort(Renderer.sortByTitle)\n    .forEach(function (ref) {\n      out.push('* [' + ref.title + '][' + ref.ref + ']')\n    })\n  if (this.options.tags) {\n    return '<!-- !ref -->\\n\\n' + out.join('\\n') + '\\n\\n<!-- ref! -->\\n'\n  } else {\n    return out.join('\\n') + '\\n'\n  }\n}\n\n/**\n * Render table of contents\n * @param {Array} toc - Array of Objects of type:\n * ```\n * { text: {String},\n *   depth: {Number}\n * }\n * ```\n * @param {Object} options - options\n * @param {Number} options.depth - show TOC up to depth\n * @param {Boolean} options.numbered - if true display numbered instead of bullet list\n * @return {String} rendered output\n */\nRenderer.prototype.tableOfContents = function (toc, options) {\n  let omitlevel\n  const opts = this.joinOpts({\n    level: options.level,\n    minlevel: options.minlevel,\n    numbered: options.numbered,\n    omit: options.omit\n  })\n  const numbering = new Numbering()\n  const br = (this.options.breaks ? ' <br>' : '')\n  const level = options.level || defaults.level // standard depth of TOC\n  const minlevel = options.minlevel || defaults.minlevel //\n\n  const renderLink = (text, autoid) => '[' + this.sanitizeHeadings(text) + '](#' + autoid + ')'\n\n  const out = toc.filter(t => {\n    if (t.depth <= level && t.depth >= minlevel) {\n      return true\n    }\n    return false\n  }).map(t => {\n    if (!this.options.numberedHeadings && options.numbered) {\n      t.number = numbering.count(t.depth - minlevel + 1)\n    }\n    return t\n  }).filter(t => {\n    if (options.omit) {\n      if (omitlevel) { // omit the branch below as well...\n        if (t.depth > omitlevel) {\n          return false\n        } else {\n          omitlevel = undefined // reset\n        }\n      }\n      return !options.omit.some(tt => {\n        if (tt === t.raw) {\n          omitlevel = t.depth\n          return true\n        }\n        return false\n      })\n    }\n    return true\n  }).map(t => {\n    if (options.numbered) {\n      // render numbered list\n      if (this.options.numberedHeadings) {\n        return (t.number ? t.number + ' ' : '') + renderLink(t.raw, t.autoid) + br\n      } else {\n        return t.number + ' ' + renderLink(t.text, t.autoid) + br\n      }\n    } else {\n      // render bullet list\n      let space = ''\n      for (let i = 1; i < (t.depth - minlevel + 1 || 1); i++) {\n        space += '  '\n      }\n      return space + '* ' + renderLink(t.text, t.autoid)\n    }\n  })\n\n  if (this.options.tags) {\n    return '<!-- !toc ' + opts + '-->\\n\\n' + out.join('\\n') + '\\n\\n<!-- toc! -->\\n\\n'\n  } else {\n    return out.join('\\n') + '\\n\\n'\n  }\n}\n\n/**\n * Render numberedheadings command\n * @param {Number} maxLevel\n * @param {Number} minLevel\n * @return {String} rendered output\n */\nRenderer.prototype.numberedHeadings = function (maxLevel, minLevel, skip, start, omit) {\n  const opts = this.joinOpts({\n    level: maxLevel,\n    minlevel: minLevel,\n    skip: skip,\n    start: start,\n    omit: omit\n  })\n  if (this.options.tags) {\n    return '<!-- !numberedheadings ' + opts + '-->\\n\\n'\n  }\n  return ''\n}\n\nRenderer.prototype.joinOpts = function (obj) {\n  const tmp = []\n  for (let key in obj) {\n    let val = obj[key]\n    if (val === true) {\n      tmp.push(key)\n    } else if (val !== undefined) {\n      if (Array.isArray(val)) {\n        val = '\"' + val.join(';') + '\"'\n      }\n      tmp.push(key + '=' + val)\n    }\n  }\n  if (tmp.length > 0) {\n    return '(' + tmp.join(' ') + ') '\n  } else {\n    return ''\n  }\n}\n\nRenderer.prototype.sanitizeHeadings = function (heading) {\n  return heading.replace(/\\[([^\\]]*)\\]\\s*(?:\\[[^\\]]*\\]|\\([^)]*\\))/g, '$1')\n}\n\nmodule.exports = Renderer\n","/**\n * Number headings\n * @constructor\n * @api private\n */\nfunction Numbering (init) {\n  this._ = [0, 0, 0, 0, 0, 0, 0]\n  this.last = 1\n  this._[1] = (init ? init - 1 : 0)\n}\n\n/**\n * Reset number array per level\n * @param {Number} level\n */\nNumbering.prototype.reset = function (level) {\n  for (let i = level + 1; i < this._.length; i++) {\n    this._[i] = 0\n  }\n}\n\n/**\n * Generate output value for number\n * @param {Number} level\n * @return {String} number\n */\nNumbering.prototype.val = function (level) {\n  let out = this._[1]\n\n  for (let i = 2; i <= level; i++) {\n    out += '.' + this._[i]\n  }\n  return out + '\\\\.'\n}\n\n/**\n * Count up per level\n * @param {Number} level\n * @return {String} number\n */\nNumbering.prototype.count = function (level) {\n  if (level <= 6) {\n    if (this.last > level) {\n      this.reset(level)\n    }\n    this._[level] += 1\n    this.last = level\n    return this.val(level)\n  }\n}\n\nmodule.exports = Numbering\n","/* eslint-disable no-multi-spaces */\n\n/**\n * initially from https://raw.githubusercontent.com/thlorenz/anchor-markdown-header/master/anchor-markdown-header.js\n * @author thlorenz\n * @license MIT\n */\n\nconst emojiRegex = require('emoji-regex')\nconst Entities = require('html-entities').AllHtmlEntities\nconst entities = new Entities()\n\nconst MODE = {\n  BITBUCKET: 'bitbucket',\n  GHOST: 'ghost',\n  GITHUB: 'github',\n  GITLAB: 'gitlab',\n  MARKDOWNIT: 'markdownit',\n  MARKED: 'marked',\n  PANDOC: 'pandoc',\n  UNIFIED: 'unified'\n}\n\n// CJK punctuations 。？！，、；：【】（）〔〕［］﹃﹄“”‘’﹁﹂—…－～《》〈〉「」\nconst RE_CJK = /[\\u2014\\u2018\\u2019\\u201c\\u201d\\u2026\\u3001\\u3002\\u3008-\\u300d\\u3010\\u3011\\u3014\\u3015\\ufe41-\\ufe44\\uff01\\uff08\\uff09\\uff0c\\uff0d\\uff1a\\uff1b\\uff1f\\uff3b\\uff3d\\uff5e]/g\nconst RE_ENTITIES     = /&([a-z][a-z0-9]+|#[0-9]{2,4});/ig\nconst RE_SPECIALS_DOT = /[./?!:[\\]`,()*\"';{}+=<>~\\\\$|#@&\\u2013\\u2014^]/g\nconst RE_SPECIALS     =  /[/?!:[\\]`,()*\"';{}+=<>~\\\\$|#@&\\u2013\\u2014^]/g\n\n/**\n * basicGithubId\n * @private\n */\nfunction basicGithubId (text) {\n  return text\n    .toLowerCase()\n    .replace(/\\s+/g, '-')         // whitespaces\n    .replace(/%25|%/ig, '')       // remove single % signs\n    .replace(RE_ENTITIES, '')     // remove xml/html entities\n    .replace(RE_SPECIALS_DOT, '') // single chars that are removed\n    .replace(RE_CJK, '')          // CJK punctuations that are removed\n}\n\n/**\n * getGithubId - anchors used at github.com\n * @private\n * If no repetition, or if the repetition is 0 then ignore. Otherwise append '-' and the number.\n */\nfunction getGithubId (text) {\n  text = basicGithubId(text)\n  text = text.replace(emojiRegex(), '') // Strip emojis\n  return text\n}\n\n/**\n * getBitbucketId - anchors used at bitbucket.org\n * @private\n * @see: https://github.com/Python-Markdown/markdown/blob/master/markdown/extensions/toc.py#L25\n * There seams to be some \"magic\" preprocessor which could not be handled here.\n * @see: https://github.com/Python-Markdown/markdown/issues/222\n * If no repetition, or if the repetition is 0 then ignore. Otherwise append '_' and the number.\n * https://groups.google.com/d/msg/bitbucket-users/XnEWbbzs5wU/Fat0UdIecZkJ\n */\nfunction getBitbucketId (text) {\n  text = 'markdown-header-' + text\n    .toLowerCase()\n    .replace(/\\\\(.)/g, (_m, c) => c.charCodeAt(0)) // add escaped chars with their charcode\n    .normalize('NFKD').replace(/[\\u0300-\\u036f]/g, '')\n    .replace(/[^\\w\\s-]/g, '')\n    .replace(/\\s+/g, '-')     // whitespace\n    .replace(/-+/g, '-')      // duplicated hyphen\n    .replace(/^-+|-+$/g, '')  // heading/ tailing hyphen\n  return text\n}\n\n/**\n * getGhostId - anchors used at ghost.org or in `npm i ghost`\n * @private\n * @see: https://github.com/TryGhost/Ghost/blob/master/core/server/lib/mobiledoc/converters/markdown-converter.js\n * Repetitions not supported\n */\nfunction getGhostId (text) {\n  return entities.decode(text).replace(/[^a-z0-9]/ig, '')\n}\n\n/**\n * getGitlabId - anchors used at gitlab.com\n * @private\n * @see: https://github.com/gitlabhq/gitlabhq/blob/master/doc/user/markdown.md#header-ids-and-links\n * If no repetition, or if the repetition is 0 then ignore. Otherwise append '-' and the number.\n */\nfunction getGitlabId (text) {\n  text = basicGithubId(text)\n  text = text\n    .replace(emojiRegex(), '')  // Strip emojis\n    .replace(/-+/g, '-')        // duplicated hyphen\n  return text\n}\n\n/**\n * getPandocId - anchors used at pandoc\n * @private\n */\nfunction getPandocId (text) {\n  text = text\n    .replace(emojiRegex(), '') // Strip emojis\n    .toLowerCase()\n    .trim()\n    .replace(/%25|%/ig, '')   // remove single % signs\n    .replace(RE_ENTITIES, '') // remove xml/html entities\n    .replace(RE_SPECIALS, '') // single chars that are removed but not [.-]\n    .replace(/\\s+/g, '-')     // whitespaces\n    .replace(/^-+|-+$/g, '')  // heading/ tailing hyphen\n    .replace(RE_CJK, '')      // CJK punctuations that are removed\n\n  if (/^[0-9-]+$/.test(text)) {\n    text = 'section'\n  }\n  return text\n}\n\n/**\n * getMarkedId - anchors used in `npm i marked`\n * @private\n * @see: https://github.com/markedjs/marked/blob/master/lib/marked.js#L1306\n */\nfunction getMarkedId (text) {\n  return entities.decode(text)\n    .toLowerCase()\n    .trim()\n    .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~_]/g, '')\n    .replace(/\\s/g, '-')\n}\n\n/**\n * getMarkDownItAnchorId - anchors used with `npm i markdown-it-anchor`\n * @private\n * @see: https://github.com/valeriangalliat/markdown-it-anchor/blob/master/index.js#L1\n * If no repetition, or if the repetition is 0 then ignore. Otherwise append '_' and the number.\n * numbering starts at 2!\n */\nfunction getMarkDownItAnchorId (text) {\n  text = text\n    .replace(/^[<]|[>]$/g, '') // correct markdown format bold/url\n  text = entities.decode(text)\n    .toLowerCase()\n    .trim()\n    .replace(/\\s+/g, '-')\n  return encodeURIComponent(text)\n}\n\n/**\n * @private\n */\nfunction asciiOnlyToLowerCase (input) {\n  let result = ''\n  for (let i = 0; i < input.length; ++i) {\n    if (input[i] >= 'A' && input[i] <= 'Z') {\n      result += input[i].toLowerCase()\n    } else {\n      result += input[i]\n    }\n  }\n  return result\n}\n\n/**\n * Generates an anchor for the given header and mode.\n *\n * @param header      {String} The header to be anchored.\n * @param mode        {String} The anchor mode (github.com|nodejs.org|bitbucket.org|ghost.org|gitlab.com).\n * @return            {String} The header anchor that is compatible with the given mode.\n */\nfunction slugger (header, mode) {\n  mode = mode || 'marked'\n  let replace\n\n  switch (mode) {\n    case MODE.MARKED:\n      replace = getMarkedId\n      break\n    case MODE.MARKDOWNIT:\n      return getMarkDownItAnchorId(header)\n    case MODE.GITHUB:\n      replace = getGithubId\n      break\n    case MODE.GITLAB:\n      replace = getGitlabId\n      break\n    case MODE.PANDOC:\n      replace = getPandocId\n      break\n    case MODE.BITBUCKET:\n      replace = getBitbucketId\n      break\n    case MODE.GHOST:\n      replace = getGhostId\n      break\n    default:\n      throw new Error('Unknown mode: ' + mode)\n  }\n\n  const href = replace(asciiOnlyToLowerCase(header.trim()))\n\n  return encodeURI(href)\n}\n\nmodule.exports = {\n  MODE,\n  slugger\n}\n","var ENTITIES = [['Aacute', [193]], ['aacute', [225]], ['Abreve', [258]], ['abreve', [259]], ['ac', [8766]], ['acd', [8767]], ['acE', [8766, 819]], ['Acirc', [194]], ['acirc', [226]], ['acute', [180]], ['Acy', [1040]], ['acy', [1072]], ['AElig', [198]], ['aelig', [230]], ['af', [8289]], ['Afr', [120068]], ['afr', [120094]], ['Agrave', [192]], ['agrave', [224]], ['alefsym', [8501]], ['aleph', [8501]], ['Alpha', [913]], ['alpha', [945]], ['Amacr', [256]], ['amacr', [257]], ['amalg', [10815]], ['amp', [38]], ['AMP', [38]], ['andand', [10837]], ['And', [10835]], ['and', [8743]], ['andd', [10844]], ['andslope', [10840]], ['andv', [10842]], ['ang', [8736]], ['ange', [10660]], ['angle', [8736]], ['angmsdaa', [10664]], ['angmsdab', [10665]], ['angmsdac', [10666]], ['angmsdad', [10667]], ['angmsdae', [10668]], ['angmsdaf', [10669]], ['angmsdag', [10670]], ['angmsdah', [10671]], ['angmsd', [8737]], ['angrt', [8735]], ['angrtvb', [8894]], ['angrtvbd', [10653]], ['angsph', [8738]], ['angst', [197]], ['angzarr', [9084]], ['Aogon', [260]], ['aogon', [261]], ['Aopf', [120120]], ['aopf', [120146]], ['apacir', [10863]], ['ap', [8776]], ['apE', [10864]], ['ape', [8778]], ['apid', [8779]], ['apos', [39]], ['ApplyFunction', [8289]], ['approx', [8776]], ['approxeq', [8778]], ['Aring', [197]], ['aring', [229]], ['Ascr', [119964]], ['ascr', [119990]], ['Assign', [8788]], ['ast', [42]], ['asymp', [8776]], ['asympeq', [8781]], ['Atilde', [195]], ['atilde', [227]], ['Auml', [196]], ['auml', [228]], ['awconint', [8755]], ['awint', [10769]], ['backcong', [8780]], ['backepsilon', [1014]], ['backprime', [8245]], ['backsim', [8765]], ['backsimeq', [8909]], ['Backslash', [8726]], ['Barv', [10983]], ['barvee', [8893]], ['barwed', [8965]], ['Barwed', [8966]], ['barwedge', [8965]], ['bbrk', [9141]], ['bbrktbrk', [9142]], ['bcong', [8780]], ['Bcy', [1041]], ['bcy', [1073]], ['bdquo', [8222]], ['becaus', [8757]], ['because', [8757]], ['Because', [8757]], ['bemptyv', [10672]], ['bepsi', [1014]], ['bernou', [8492]], ['Bernoullis', [8492]], ['Beta', [914]], ['beta', [946]], ['beth', [8502]], ['between', [8812]], ['Bfr', [120069]], ['bfr', [120095]], ['bigcap', [8898]], ['bigcirc', [9711]], ['bigcup', [8899]], ['bigodot', [10752]], ['bigoplus', [10753]], ['bigotimes', [10754]], ['bigsqcup', [10758]], ['bigstar', [9733]], ['bigtriangledown', [9661]], ['bigtriangleup', [9651]], ['biguplus', [10756]], ['bigvee', [8897]], ['bigwedge', [8896]], ['bkarow', [10509]], ['blacklozenge', [10731]], ['blacksquare', [9642]], ['blacktriangle', [9652]], ['blacktriangledown', [9662]], ['blacktriangleleft', [9666]], ['blacktriangleright', [9656]], ['blank', [9251]], ['blk12', [9618]], ['blk14', [9617]], ['blk34', [9619]], ['block', [9608]], ['bne', [61, 8421]], ['bnequiv', [8801, 8421]], ['bNot', [10989]], ['bnot', [8976]], ['Bopf', [120121]], ['bopf', [120147]], ['bot', [8869]], ['bottom', [8869]], ['bowtie', [8904]], ['boxbox', [10697]], ['boxdl', [9488]], ['boxdL', [9557]], ['boxDl', [9558]], ['boxDL', [9559]], ['boxdr', [9484]], ['boxdR', [9554]], ['boxDr', [9555]], ['boxDR', [9556]], ['boxh', [9472]], ['boxH', [9552]], ['boxhd', [9516]], ['boxHd', [9572]], ['boxhD', [9573]], ['boxHD', [9574]], ['boxhu', [9524]], ['boxHu', [9575]], ['boxhU', [9576]], ['boxHU', [9577]], ['boxminus', [8863]], ['boxplus', [8862]], ['boxtimes', [8864]], ['boxul', [9496]], ['boxuL', [9563]], ['boxUl', [9564]], ['boxUL', [9565]], ['boxur', [9492]], ['boxuR', [9560]], ['boxUr', [9561]], ['boxUR', [9562]], ['boxv', [9474]], ['boxV', [9553]], ['boxvh', [9532]], ['boxvH', [9578]], ['boxVh', [9579]], ['boxVH', [9580]], ['boxvl', [9508]], ['boxvL', [9569]], ['boxVl', [9570]], ['boxVL', [9571]], ['boxvr', [9500]], ['boxvR', [9566]], ['boxVr', [9567]], ['boxVR', [9568]], ['bprime', [8245]], ['breve', [728]], ['Breve', [728]], ['brvbar', [166]], ['bscr', [119991]], ['Bscr', [8492]], ['bsemi', [8271]], ['bsim', [8765]], ['bsime', [8909]], ['bsolb', [10693]], ['bsol', [92]], ['bsolhsub', [10184]], ['bull', [8226]], ['bullet', [8226]], ['bump', [8782]], ['bumpE', [10926]], ['bumpe', [8783]], ['Bumpeq', [8782]], ['bumpeq', [8783]], ['Cacute', [262]], ['cacute', [263]], ['capand', [10820]], ['capbrcup', [10825]], ['capcap', [10827]], ['cap', [8745]], ['Cap', [8914]], ['capcup', [10823]], ['capdot', [10816]], ['CapitalDifferentialD', [8517]], ['caps', [8745, 65024]], ['caret', [8257]], ['caron', [711]], ['Cayleys', [8493]], ['ccaps', [10829]], ['Ccaron', [268]], ['ccaron', [269]], ['Ccedil', [199]], ['ccedil', [231]], ['Ccirc', [264]], ['ccirc', [265]], ['Cconint', [8752]], ['ccups', [10828]], ['ccupssm', [10832]], ['Cdot', [266]], ['cdot', [267]], ['cedil', [184]], ['Cedilla', [184]], ['cemptyv', [10674]], ['cent', [162]], ['centerdot', [183]], ['CenterDot', [183]], ['cfr', [120096]], ['Cfr', [8493]], ['CHcy', [1063]], ['chcy', [1095]], ['check', [10003]], ['checkmark', [10003]], ['Chi', [935]], ['chi', [967]], ['circ', [710]], ['circeq', [8791]], ['circlearrowleft', [8634]], ['circlearrowright', [8635]], ['circledast', [8859]], ['circledcirc', [8858]], ['circleddash', [8861]], ['CircleDot', [8857]], ['circledR', [174]], ['circledS', [9416]], ['CircleMinus', [8854]], ['CirclePlus', [8853]], ['CircleTimes', [8855]], ['cir', [9675]], ['cirE', [10691]], ['cire', [8791]], ['cirfnint', [10768]], ['cirmid', [10991]], ['cirscir', [10690]], ['ClockwiseContourIntegral', [8754]], ['clubs', [9827]], ['clubsuit', [9827]], ['colon', [58]], ['Colon', [8759]], ['Colone', [10868]], ['colone', [8788]], ['coloneq', [8788]], ['comma', [44]], ['commat', [64]], ['comp', [8705]], ['compfn', [8728]], ['complement', [8705]], ['complexes', [8450]], ['cong', [8773]], ['congdot', [10861]], ['Congruent', [8801]], ['conint', [8750]], ['Conint', [8751]], ['ContourIntegral', [8750]], ['copf', [120148]], ['Copf', [8450]], ['coprod', [8720]], ['Coproduct', [8720]], ['copy', [169]], ['COPY', [169]], ['copysr', [8471]], ['CounterClockwiseContourIntegral', [8755]], ['crarr', [8629]], ['cross', [10007]], ['Cross', [10799]], ['Cscr', [119966]], ['cscr', [119992]], ['csub', [10959]], ['csube', [10961]], ['csup', [10960]], ['csupe', [10962]], ['ctdot', [8943]], ['cudarrl', [10552]], ['cudarrr', [10549]], ['cuepr', [8926]], ['cuesc', [8927]], ['cularr', [8630]], ['cularrp', [10557]], ['cupbrcap', [10824]], ['cupcap', [10822]], ['CupCap', [8781]], ['cup', [8746]], ['Cup', [8915]], ['cupcup', [10826]], ['cupdot', [8845]], ['cupor', [10821]], ['cups', [8746, 65024]], ['curarr', [8631]], ['curarrm', [10556]], ['curlyeqprec', [8926]], ['curlyeqsucc', [8927]], ['curlyvee', [8910]], ['curlywedge', [8911]], ['curren', [164]], ['curvearrowleft', [8630]], ['curvearrowright', [8631]], ['cuvee', [8910]], ['cuwed', [8911]], ['cwconint', [8754]], ['cwint', [8753]], ['cylcty', [9005]], ['dagger', [8224]], ['Dagger', [8225]], ['daleth', [8504]], ['darr', [8595]], ['Darr', [8609]], ['dArr', [8659]], ['dash', [8208]], ['Dashv', [10980]], ['dashv', [8867]], ['dbkarow', [10511]], ['dblac', [733]], ['Dcaron', [270]], ['dcaron', [271]], ['Dcy', [1044]], ['dcy', [1076]], ['ddagger', [8225]], ['ddarr', [8650]], ['DD', [8517]], ['dd', [8518]], ['DDotrahd', [10513]], ['ddotseq', [10871]], ['deg', [176]], ['Del', [8711]], ['Delta', [916]], ['delta', [948]], ['demptyv', [10673]], ['dfisht', [10623]], ['Dfr', [120071]], ['dfr', [120097]], ['dHar', [10597]], ['dharl', [8643]], ['dharr', [8642]], ['DiacriticalAcute', [180]], ['DiacriticalDot', [729]], ['DiacriticalDoubleAcute', [733]], ['DiacriticalGrave', [96]], ['DiacriticalTilde', [732]], ['diam', [8900]], ['diamond', [8900]], ['Diamond', [8900]], ['diamondsuit', [9830]], ['diams', [9830]], ['die', [168]], ['DifferentialD', [8518]], ['digamma', [989]], ['disin', [8946]], ['div', [247]], ['divide', [247]], ['divideontimes', [8903]], ['divonx', [8903]], ['DJcy', [1026]], ['djcy', [1106]], ['dlcorn', [8990]], ['dlcrop', [8973]], ['dollar', [36]], ['Dopf', [120123]], ['dopf', [120149]], ['Dot', [168]], ['dot', [729]], ['DotDot', [8412]], ['doteq', [8784]], ['doteqdot', [8785]], ['DotEqual', [8784]], ['dotminus', [8760]], ['dotplus', [8724]], ['dotsquare', [8865]], ['doublebarwedge', [8966]], ['DoubleContourIntegral', [8751]], ['DoubleDot', [168]], ['DoubleDownArrow', [8659]], ['DoubleLeftArrow', [8656]], ['DoubleLeftRightArrow', [8660]], ['DoubleLeftTee', [10980]], ['DoubleLongLeftArrow', [10232]], ['DoubleLongLeftRightArrow', [10234]], ['DoubleLongRightArrow', [10233]], ['DoubleRightArrow', [8658]], ['DoubleRightTee', [8872]], ['DoubleUpArrow', [8657]], ['DoubleUpDownArrow', [8661]], ['DoubleVerticalBar', [8741]], ['DownArrowBar', [10515]], ['downarrow', [8595]], ['DownArrow', [8595]], ['Downarrow', [8659]], ['DownArrowUpArrow', [8693]], ['DownBreve', [785]], ['downdownarrows', [8650]], ['downharpoonleft', [8643]], ['downharpoonright', [8642]], ['DownLeftRightVector', [10576]], ['DownLeftTeeVector', [10590]], ['DownLeftVectorBar', [10582]], ['DownLeftVector', [8637]], ['DownRightTeeVector', [10591]], ['DownRightVectorBar', [10583]], ['DownRightVector', [8641]], ['DownTeeArrow', [8615]], ['DownTee', [8868]], ['drbkarow', [10512]], ['drcorn', [8991]], ['drcrop', [8972]], ['Dscr', [119967]], ['dscr', [119993]], ['DScy', [1029]], ['dscy', [1109]], ['dsol', [10742]], ['Dstrok', [272]], ['dstrok', [273]], ['dtdot', [8945]], ['dtri', [9663]], ['dtrif', [9662]], ['duarr', [8693]], ['duhar', [10607]], ['dwangle', [10662]], ['DZcy', [1039]], ['dzcy', [1119]], ['dzigrarr', [10239]], ['Eacute', [201]], ['eacute', [233]], ['easter', [10862]], ['Ecaron', [282]], ['ecaron', [283]], ['Ecirc', [202]], ['ecirc', [234]], ['ecir', [8790]], ['ecolon', [8789]], ['Ecy', [1069]], ['ecy', [1101]], ['eDDot', [10871]], ['Edot', [278]], ['edot', [279]], ['eDot', [8785]], ['ee', [8519]], ['efDot', [8786]], ['Efr', [120072]], ['efr', [120098]], ['eg', [10906]], ['Egrave', [200]], ['egrave', [232]], ['egs', [10902]], ['egsdot', [10904]], ['el', [10905]], ['Element', [8712]], ['elinters', [9191]], ['ell', [8467]], ['els', [10901]], ['elsdot', [10903]], ['Emacr', [274]], ['emacr', [275]], ['empty', [8709]], ['emptyset', [8709]], ['EmptySmallSquare', [9723]], ['emptyv', [8709]], ['EmptyVerySmallSquare', [9643]], ['emsp13', [8196]], ['emsp14', [8197]], ['emsp', [8195]], ['ENG', [330]], ['eng', [331]], ['ensp', [8194]], ['Eogon', [280]], ['eogon', [281]], ['Eopf', [120124]], ['eopf', [120150]], ['epar', [8917]], ['eparsl', [10723]], ['eplus', [10865]], ['epsi', [949]], ['Epsilon', [917]], ['epsilon', [949]], ['epsiv', [1013]], ['eqcirc', [8790]], ['eqcolon', [8789]], ['eqsim', [8770]], ['eqslantgtr', [10902]], ['eqslantless', [10901]], ['Equal', [10869]], ['equals', [61]], ['EqualTilde', [8770]], ['equest', [8799]], ['Equilibrium', [8652]], ['equiv', [8801]], ['equivDD', [10872]], ['eqvparsl', [10725]], ['erarr', [10609]], ['erDot', [8787]], ['escr', [8495]], ['Escr', [8496]], ['esdot', [8784]], ['Esim', [10867]], ['esim', [8770]], ['Eta', [919]], ['eta', [951]], ['ETH', [208]], ['eth', [240]], ['Euml', [203]], ['euml', [235]], ['euro', [8364]], ['excl', [33]], ['exist', [8707]], ['Exists', [8707]], ['expectation', [8496]], ['exponentiale', [8519]], ['ExponentialE', [8519]], ['fallingdotseq', [8786]], ['Fcy', [1060]], ['fcy', [1092]], ['female', [9792]], ['ffilig', [64259]], ['fflig', [64256]], ['ffllig', [64260]], ['Ffr', [120073]], ['ffr', [120099]], ['filig', [64257]], ['FilledSmallSquare', [9724]], ['FilledVerySmallSquare', [9642]], ['fjlig', [102, 106]], ['flat', [9837]], ['fllig', [64258]], ['fltns', [9649]], ['fnof', [402]], ['Fopf', [120125]], ['fopf', [120151]], ['forall', [8704]], ['ForAll', [8704]], ['fork', [8916]], ['forkv', [10969]], ['Fouriertrf', [8497]], ['fpartint', [10765]], ['frac12', [189]], ['frac13', [8531]], ['frac14', [188]], ['frac15', [8533]], ['frac16', [8537]], ['frac18', [8539]], ['frac23', [8532]], ['frac25', [8534]], ['frac34', [190]], ['frac35', [8535]], ['frac38', [8540]], ['frac45', [8536]], ['frac56', [8538]], ['frac58', [8541]], ['frac78', [8542]], ['frasl', [8260]], ['frown', [8994]], ['fscr', [119995]], ['Fscr', [8497]], ['gacute', [501]], ['Gamma', [915]], ['gamma', [947]], ['Gammad', [988]], ['gammad', [989]], ['gap', [10886]], ['Gbreve', [286]], ['gbreve', [287]], ['Gcedil', [290]], ['Gcirc', [284]], ['gcirc', [285]], ['Gcy', [1043]], ['gcy', [1075]], ['Gdot', [288]], ['gdot', [289]], ['ge', [8805]], ['gE', [8807]], ['gEl', [10892]], ['gel', [8923]], ['geq', [8805]], ['geqq', [8807]], ['geqslant', [10878]], ['gescc', [10921]], ['ges', [10878]], ['gesdot', [10880]], ['gesdoto', [10882]], ['gesdotol', [10884]], ['gesl', [8923, 65024]], ['gesles', [10900]], ['Gfr', [120074]], ['gfr', [120100]], ['gg', [8811]], ['Gg', [8921]], ['ggg', [8921]], ['gimel', [8503]], ['GJcy', [1027]], ['gjcy', [1107]], ['gla', [10917]], ['gl', [8823]], ['glE', [10898]], ['glj', [10916]], ['gnap', [10890]], ['gnapprox', [10890]], ['gne', [10888]], ['gnE', [8809]], ['gneq', [10888]], ['gneqq', [8809]], ['gnsim', [8935]], ['Gopf', [120126]], ['gopf', [120152]], ['grave', [96]], ['GreaterEqual', [8805]], ['GreaterEqualLess', [8923]], ['GreaterFullEqual', [8807]], ['GreaterGreater', [10914]], ['GreaterLess', [8823]], ['GreaterSlantEqual', [10878]], ['GreaterTilde', [8819]], ['Gscr', [119970]], ['gscr', [8458]], ['gsim', [8819]], ['gsime', [10894]], ['gsiml', [10896]], ['gtcc', [10919]], ['gtcir', [10874]], ['gt', [62]], ['GT', [62]], ['Gt', [8811]], ['gtdot', [8919]], ['gtlPar', [10645]], ['gtquest', [10876]], ['gtrapprox', [10886]], ['gtrarr', [10616]], ['gtrdot', [8919]], ['gtreqless', [8923]], ['gtreqqless', [10892]], ['gtrless', [8823]], ['gtrsim', [8819]], ['gvertneqq', [8809, 65024]], ['gvnE', [8809, 65024]], ['Hacek', [711]], ['hairsp', [8202]], ['half', [189]], ['hamilt', [8459]], ['HARDcy', [1066]], ['hardcy', [1098]], ['harrcir', [10568]], ['harr', [8596]], ['hArr', [8660]], ['harrw', [8621]], ['Hat', [94]], ['hbar', [8463]], ['Hcirc', [292]], ['hcirc', [293]], ['hearts', [9829]], ['heartsuit', [9829]], ['hellip', [8230]], ['hercon', [8889]], ['hfr', [120101]], ['Hfr', [8460]], ['HilbertSpace', [8459]], ['hksearow', [10533]], ['hkswarow', [10534]], ['hoarr', [8703]], ['homtht', [8763]], ['hookleftarrow', [8617]], ['hookrightarrow', [8618]], ['hopf', [120153]], ['Hopf', [8461]], ['horbar', [8213]], ['HorizontalLine', [9472]], ['hscr', [119997]], ['Hscr', [8459]], ['hslash', [8463]], ['Hstrok', [294]], ['hstrok', [295]], ['HumpDownHump', [8782]], ['HumpEqual', [8783]], ['hybull', [8259]], ['hyphen', [8208]], ['Iacute', [205]], ['iacute', [237]], ['ic', [8291]], ['Icirc', [206]], ['icirc', [238]], ['Icy', [1048]], ['icy', [1080]], ['Idot', [304]], ['IEcy', [1045]], ['iecy', [1077]], ['iexcl', [161]], ['iff', [8660]], ['ifr', [120102]], ['Ifr', [8465]], ['Igrave', [204]], ['igrave', [236]], ['ii', [8520]], ['iiiint', [10764]], ['iiint', [8749]], ['iinfin', [10716]], ['iiota', [8489]], ['IJlig', [306]], ['ijlig', [307]], ['Imacr', [298]], ['imacr', [299]], ['image', [8465]], ['ImaginaryI', [8520]], ['imagline', [8464]], ['imagpart', [8465]], ['imath', [305]], ['Im', [8465]], ['imof', [8887]], ['imped', [437]], ['Implies', [8658]], ['incare', [8453]], ['in', [8712]], ['infin', [8734]], ['infintie', [10717]], ['inodot', [305]], ['intcal', [8890]], ['int', [8747]], ['Int', [8748]], ['integers', [8484]], ['Integral', [8747]], ['intercal', [8890]], ['Intersection', [8898]], ['intlarhk', [10775]], ['intprod', [10812]], ['InvisibleComma', [8291]], ['InvisibleTimes', [8290]], ['IOcy', [1025]], ['iocy', [1105]], ['Iogon', [302]], ['iogon', [303]], ['Iopf', [120128]], ['iopf', [120154]], ['Iota', [921]], ['iota', [953]], ['iprod', [10812]], ['iquest', [191]], ['iscr', [119998]], ['Iscr', [8464]], ['isin', [8712]], ['isindot', [8949]], ['isinE', [8953]], ['isins', [8948]], ['isinsv', [8947]], ['isinv', [8712]], ['it', [8290]], ['Itilde', [296]], ['itilde', [297]], ['Iukcy', [1030]], ['iukcy', [1110]], ['Iuml', [207]], ['iuml', [239]], ['Jcirc', [308]], ['jcirc', [309]], ['Jcy', [1049]], ['jcy', [1081]], ['Jfr', [120077]], ['jfr', [120103]], ['jmath', [567]], ['Jopf', [120129]], ['jopf', [120155]], ['Jscr', [119973]], ['jscr', [119999]], ['Jsercy', [1032]], ['jsercy', [1112]], ['Jukcy', [1028]], ['jukcy', [1108]], ['Kappa', [922]], ['kappa', [954]], ['kappav', [1008]], ['Kcedil', [310]], ['kcedil', [311]], ['Kcy', [1050]], ['kcy', [1082]], ['Kfr', [120078]], ['kfr', [120104]], ['kgreen', [312]], ['KHcy', [1061]], ['khcy', [1093]], ['KJcy', [1036]], ['kjcy', [1116]], ['Kopf', [120130]], ['kopf', [120156]], ['Kscr', [119974]], ['kscr', [120000]], ['lAarr', [8666]], ['Lacute', [313]], ['lacute', [314]], ['laemptyv', [10676]], ['lagran', [8466]], ['Lambda', [923]], ['lambda', [955]], ['lang', [10216]], ['Lang', [10218]], ['langd', [10641]], ['langle', [10216]], ['lap', [10885]], ['Laplacetrf', [8466]], ['laquo', [171]], ['larrb', [8676]], ['larrbfs', [10527]], ['larr', [8592]], ['Larr', [8606]], ['lArr', [8656]], ['larrfs', [10525]], ['larrhk', [8617]], ['larrlp', [8619]], ['larrpl', [10553]], ['larrsim', [10611]], ['larrtl', [8610]], ['latail', [10521]], ['lAtail', [10523]], ['lat', [10923]], ['late', [10925]], ['lates', [10925, 65024]], ['lbarr', [10508]], ['lBarr', [10510]], ['lbbrk', [10098]], ['lbrace', [123]], ['lbrack', [91]], ['lbrke', [10635]], ['lbrksld', [10639]], ['lbrkslu', [10637]], ['Lcaron', [317]], ['lcaron', [318]], ['Lcedil', [315]], ['lcedil', [316]], ['lceil', [8968]], ['lcub', [123]], ['Lcy', [1051]], ['lcy', [1083]], ['ldca', [10550]], ['ldquo', [8220]], ['ldquor', [8222]], ['ldrdhar', [10599]], ['ldrushar', [10571]], ['ldsh', [8626]], ['le', [8804]], ['lE', [8806]], ['LeftAngleBracket', [10216]], ['LeftArrowBar', [8676]], ['leftarrow', [8592]], ['LeftArrow', [8592]], ['Leftarrow', [8656]], ['LeftArrowRightArrow', [8646]], ['leftarrowtail', [8610]], ['LeftCeiling', [8968]], ['LeftDoubleBracket', [10214]], ['LeftDownTeeVector', [10593]], ['LeftDownVectorBar', [10585]], ['LeftDownVector', [8643]], ['LeftFloor', [8970]], ['leftharpoondown', [8637]], ['leftharpoonup', [8636]], ['leftleftarrows', [8647]], ['leftrightarrow', [8596]], ['LeftRightArrow', [8596]], ['Leftrightarrow', [8660]], ['leftrightarrows', [8646]], ['leftrightharpoons', [8651]], ['leftrightsquigarrow', [8621]], ['LeftRightVector', [10574]], ['LeftTeeArrow', [8612]], ['LeftTee', [8867]], ['LeftTeeVector', [10586]], ['leftthreetimes', [8907]], ['LeftTriangleBar', [10703]], ['LeftTriangle', [8882]], ['LeftTriangleEqual', [8884]], ['LeftUpDownVector', [10577]], ['LeftUpTeeVector', [10592]], ['LeftUpVectorBar', [10584]], ['LeftUpVector', [8639]], ['LeftVectorBar', [10578]], ['LeftVector', [8636]], ['lEg', [10891]], ['leg', [8922]], ['leq', [8804]], ['leqq', [8806]], ['leqslant', [10877]], ['lescc', [10920]], ['les', [10877]], ['lesdot', [10879]], ['lesdoto', [10881]], ['lesdotor', [10883]], ['lesg', [8922, 65024]], ['lesges', [10899]], ['lessapprox', [10885]], ['lessdot', [8918]], ['lesseqgtr', [8922]], ['lesseqqgtr', [10891]], ['LessEqualGreater', [8922]], ['LessFullEqual', [8806]], ['LessGreater', [8822]], ['lessgtr', [8822]], ['LessLess', [10913]], ['lesssim', [8818]], ['LessSlantEqual', [10877]], ['LessTilde', [8818]], ['lfisht', [10620]], ['lfloor', [8970]], ['Lfr', [120079]], ['lfr', [120105]], ['lg', [8822]], ['lgE', [10897]], ['lHar', [10594]], ['lhard', [8637]], ['lharu', [8636]], ['lharul', [10602]], ['lhblk', [9604]], ['LJcy', [1033]], ['ljcy', [1113]], ['llarr', [8647]], ['ll', [8810]], ['Ll', [8920]], ['llcorner', [8990]], ['Lleftarrow', [8666]], ['llhard', [10603]], ['lltri', [9722]], ['Lmidot', [319]], ['lmidot', [320]], ['lmoustache', [9136]], ['lmoust', [9136]], ['lnap', [10889]], ['lnapprox', [10889]], ['lne', [10887]], ['lnE', [8808]], ['lneq', [10887]], ['lneqq', [8808]], ['lnsim', [8934]], ['loang', [10220]], ['loarr', [8701]], ['lobrk', [10214]], ['longleftarrow', [10229]], ['LongLeftArrow', [10229]], ['Longleftarrow', [10232]], ['longleftrightarrow', [10231]], ['LongLeftRightArrow', [10231]], ['Longleftrightarrow', [10234]], ['longmapsto', [10236]], ['longrightarrow', [10230]], ['LongRightArrow', [10230]], ['Longrightarrow', [10233]], ['looparrowleft', [8619]], ['looparrowright', [8620]], ['lopar', [10629]], ['Lopf', [120131]], ['lopf', [120157]], ['loplus', [10797]], ['lotimes', [10804]], ['lowast', [8727]], ['lowbar', [95]], ['LowerLeftArrow', [8601]], ['LowerRightArrow', [8600]], ['loz', [9674]], ['lozenge', [9674]], ['lozf', [10731]], ['lpar', [40]], ['lparlt', [10643]], ['lrarr', [8646]], ['lrcorner', [8991]], ['lrhar', [8651]], ['lrhard', [10605]], ['lrm', [8206]], ['lrtri', [8895]], ['lsaquo', [8249]], ['lscr', [120001]], ['Lscr', [8466]], ['lsh', [8624]], ['Lsh', [8624]], ['lsim', [8818]], ['lsime', [10893]], ['lsimg', [10895]], ['lsqb', [91]], ['lsquo', [8216]], ['lsquor', [8218]], ['Lstrok', [321]], ['lstrok', [322]], ['ltcc', [10918]], ['ltcir', [10873]], ['lt', [60]], ['LT', [60]], ['Lt', [8810]], ['ltdot', [8918]], ['lthree', [8907]], ['ltimes', [8905]], ['ltlarr', [10614]], ['ltquest', [10875]], ['ltri', [9667]], ['ltrie', [8884]], ['ltrif', [9666]], ['ltrPar', [10646]], ['lurdshar', [10570]], ['luruhar', [10598]], ['lvertneqq', [8808, 65024]], ['lvnE', [8808, 65024]], ['macr', [175]], ['male', [9794]], ['malt', [10016]], ['maltese', [10016]], ['Map', [10501]], ['map', [8614]], ['mapsto', [8614]], ['mapstodown', [8615]], ['mapstoleft', [8612]], ['mapstoup', [8613]], ['marker', [9646]], ['mcomma', [10793]], ['Mcy', [1052]], ['mcy', [1084]], ['mdash', [8212]], ['mDDot', [8762]], ['measuredangle', [8737]], ['MediumSpace', [8287]], ['Mellintrf', [8499]], ['Mfr', [120080]], ['mfr', [120106]], ['mho', [8487]], ['micro', [181]], ['midast', [42]], ['midcir', [10992]], ['mid', [8739]], ['middot', [183]], ['minusb', [8863]], ['minus', [8722]], ['minusd', [8760]], ['minusdu', [10794]], ['MinusPlus', [8723]], ['mlcp', [10971]], ['mldr', [8230]], ['mnplus', [8723]], ['models', [8871]], ['Mopf', [120132]], ['mopf', [120158]], ['mp', [8723]], ['mscr', [120002]], ['Mscr', [8499]], ['mstpos', [8766]], ['Mu', [924]], ['mu', [956]], ['multimap', [8888]], ['mumap', [8888]], ['nabla', [8711]], ['Nacute', [323]], ['nacute', [324]], ['nang', [8736, 8402]], ['nap', [8777]], ['napE', [10864, 824]], ['napid', [8779, 824]], ['napos', [329]], ['napprox', [8777]], ['natural', [9838]], ['naturals', [8469]], ['natur', [9838]], ['nbsp', [160]], ['nbump', [8782, 824]], ['nbumpe', [8783, 824]], ['ncap', [10819]], ['Ncaron', [327]], ['ncaron', [328]], ['Ncedil', [325]], ['ncedil', [326]], ['ncong', [8775]], ['ncongdot', [10861, 824]], ['ncup', [10818]], ['Ncy', [1053]], ['ncy', [1085]], ['ndash', [8211]], ['nearhk', [10532]], ['nearr', [8599]], ['neArr', [8663]], ['nearrow', [8599]], ['ne', [8800]], ['nedot', [8784, 824]], ['NegativeMediumSpace', [8203]], ['NegativeThickSpace', [8203]], ['NegativeThinSpace', [8203]], ['NegativeVeryThinSpace', [8203]], ['nequiv', [8802]], ['nesear', [10536]], ['nesim', [8770, 824]], ['NestedGreaterGreater', [8811]], ['NestedLessLess', [8810]], ['nexist', [8708]], ['nexists', [8708]], ['Nfr', [120081]], ['nfr', [120107]], ['ngE', [8807, 824]], ['nge', [8817]], ['ngeq', [8817]], ['ngeqq', [8807, 824]], ['ngeqslant', [10878, 824]], ['nges', [10878, 824]], ['nGg', [8921, 824]], ['ngsim', [8821]], ['nGt', [8811, 8402]], ['ngt', [8815]], ['ngtr', [8815]], ['nGtv', [8811, 824]], ['nharr', [8622]], ['nhArr', [8654]], ['nhpar', [10994]], ['ni', [8715]], ['nis', [8956]], ['nisd', [8954]], ['niv', [8715]], ['NJcy', [1034]], ['njcy', [1114]], ['nlarr', [8602]], ['nlArr', [8653]], ['nldr', [8229]], ['nlE', [8806, 824]], ['nle', [8816]], ['nleftarrow', [8602]], ['nLeftarrow', [8653]], ['nleftrightarrow', [8622]], ['nLeftrightarrow', [8654]], ['nleq', [8816]], ['nleqq', [8806, 824]], ['nleqslant', [10877, 824]], ['nles', [10877, 824]], ['nless', [8814]], ['nLl', [8920, 824]], ['nlsim', [8820]], ['nLt', [8810, 8402]], ['nlt', [8814]], ['nltri', [8938]], ['nltrie', [8940]], ['nLtv', [8810, 824]], ['nmid', [8740]], ['NoBreak', [8288]], ['NonBreakingSpace', [160]], ['nopf', [120159]], ['Nopf', [8469]], ['Not', [10988]], ['not', [172]], ['NotCongruent', [8802]], ['NotCupCap', [8813]], ['NotDoubleVerticalBar', [8742]], ['NotElement', [8713]], ['NotEqual', [8800]], ['NotEqualTilde', [8770, 824]], ['NotExists', [8708]], ['NotGreater', [8815]], ['NotGreaterEqual', [8817]], ['NotGreaterFullEqual', [8807, 824]], ['NotGreaterGreater', [8811, 824]], ['NotGreaterLess', [8825]], ['NotGreaterSlantEqual', [10878, 824]], ['NotGreaterTilde', [8821]], ['NotHumpDownHump', [8782, 824]], ['NotHumpEqual', [8783, 824]], ['notin', [8713]], ['notindot', [8949, 824]], ['notinE', [8953, 824]], ['notinva', [8713]], ['notinvb', [8951]], ['notinvc', [8950]], ['NotLeftTriangleBar', [10703, 824]], ['NotLeftTriangle', [8938]], ['NotLeftTriangleEqual', [8940]], ['NotLess', [8814]], ['NotLessEqual', [8816]], ['NotLessGreater', [8824]], ['NotLessLess', [8810, 824]], ['NotLessSlantEqual', [10877, 824]], ['NotLessTilde', [8820]], ['NotNestedGreaterGreater', [10914, 824]], ['NotNestedLessLess', [10913, 824]], ['notni', [8716]], ['notniva', [8716]], ['notnivb', [8958]], ['notnivc', [8957]], ['NotPrecedes', [8832]], ['NotPrecedesEqual', [10927, 824]], ['NotPrecedesSlantEqual', [8928]], ['NotReverseElement', [8716]], ['NotRightTriangleBar', [10704, 824]], ['NotRightTriangle', [8939]], ['NotRightTriangleEqual', [8941]], ['NotSquareSubset', [8847, 824]], ['NotSquareSubsetEqual', [8930]], ['NotSquareSuperset', [8848, 824]], ['NotSquareSupersetEqual', [8931]], ['NotSubset', [8834, 8402]], ['NotSubsetEqual', [8840]], ['NotSucceeds', [8833]], ['NotSucceedsEqual', [10928, 824]], ['NotSucceedsSlantEqual', [8929]], ['NotSucceedsTilde', [8831, 824]], ['NotSuperset', [8835, 8402]], ['NotSupersetEqual', [8841]], ['NotTilde', [8769]], ['NotTildeEqual', [8772]], ['NotTildeFullEqual', [8775]], ['NotTildeTilde', [8777]], ['NotVerticalBar', [8740]], ['nparallel', [8742]], ['npar', [8742]], ['nparsl', [11005, 8421]], ['npart', [8706, 824]], ['npolint', [10772]], ['npr', [8832]], ['nprcue', [8928]], ['nprec', [8832]], ['npreceq', [10927, 824]], ['npre', [10927, 824]], ['nrarrc', [10547, 824]], ['nrarr', [8603]], ['nrArr', [8655]], ['nrarrw', [8605, 824]], ['nrightarrow', [8603]], ['nRightarrow', [8655]], ['nrtri', [8939]], ['nrtrie', [8941]], ['nsc', [8833]], ['nsccue', [8929]], ['nsce', [10928, 824]], ['Nscr', [119977]], ['nscr', [120003]], ['nshortmid', [8740]], ['nshortparallel', [8742]], ['nsim', [8769]], ['nsime', [8772]], ['nsimeq', [8772]], ['nsmid', [8740]], ['nspar', [8742]], ['nsqsube', [8930]], ['nsqsupe', [8931]], ['nsub', [8836]], ['nsubE', [10949, 824]], ['nsube', [8840]], ['nsubset', [8834, 8402]], ['nsubseteq', [8840]], ['nsubseteqq', [10949, 824]], ['nsucc', [8833]], ['nsucceq', [10928, 824]], ['nsup', [8837]], ['nsupE', [10950, 824]], ['nsupe', [8841]], ['nsupset', [8835, 8402]], ['nsupseteq', [8841]], ['nsupseteqq', [10950, 824]], ['ntgl', [8825]], ['Ntilde', [209]], ['ntilde', [241]], ['ntlg', [8824]], ['ntriangleleft', [8938]], ['ntrianglelefteq', [8940]], ['ntriangleright', [8939]], ['ntrianglerighteq', [8941]], ['Nu', [925]], ['nu', [957]], ['num', [35]], ['numero', [8470]], ['numsp', [8199]], ['nvap', [8781, 8402]], ['nvdash', [8876]], ['nvDash', [8877]], ['nVdash', [8878]], ['nVDash', [8879]], ['nvge', [8805, 8402]], ['nvgt', [62, 8402]], ['nvHarr', [10500]], ['nvinfin', [10718]], ['nvlArr', [10498]], ['nvle', [8804, 8402]], ['nvlt', [60, 8402]], ['nvltrie', [8884, 8402]], ['nvrArr', [10499]], ['nvrtrie', [8885, 8402]], ['nvsim', [8764, 8402]], ['nwarhk', [10531]], ['nwarr', [8598]], ['nwArr', [8662]], ['nwarrow', [8598]], ['nwnear', [10535]], ['Oacute', [211]], ['oacute', [243]], ['oast', [8859]], ['Ocirc', [212]], ['ocirc', [244]], ['ocir', [8858]], ['Ocy', [1054]], ['ocy', [1086]], ['odash', [8861]], ['Odblac', [336]], ['odblac', [337]], ['odiv', [10808]], ['odot', [8857]], ['odsold', [10684]], ['OElig', [338]], ['oelig', [339]], ['ofcir', [10687]], ['Ofr', [120082]], ['ofr', [120108]], ['ogon', [731]], ['Ograve', [210]], ['ograve', [242]], ['ogt', [10689]], ['ohbar', [10677]], ['ohm', [937]], ['oint', [8750]], ['olarr', [8634]], ['olcir', [10686]], ['olcross', [10683]], ['oline', [8254]], ['olt', [10688]], ['Omacr', [332]], ['omacr', [333]], ['Omega', [937]], ['omega', [969]], ['Omicron', [927]], ['omicron', [959]], ['omid', [10678]], ['ominus', [8854]], ['Oopf', [120134]], ['oopf', [120160]], ['opar', [10679]], ['OpenCurlyDoubleQuote', [8220]], ['OpenCurlyQuote', [8216]], ['operp', [10681]], ['oplus', [8853]], ['orarr', [8635]], ['Or', [10836]], ['or', [8744]], ['ord', [10845]], ['order', [8500]], ['orderof', [8500]], ['ordf', [170]], ['ordm', [186]], ['origof', [8886]], ['oror', [10838]], ['orslope', [10839]], ['orv', [10843]], ['oS', [9416]], ['Oscr', [119978]], ['oscr', [8500]], ['Oslash', [216]], ['oslash', [248]], ['osol', [8856]], ['Otilde', [213]], ['otilde', [245]], ['otimesas', [10806]], ['Otimes', [10807]], ['otimes', [8855]], ['Ouml', [214]], ['ouml', [246]], ['ovbar', [9021]], ['OverBar', [8254]], ['OverBrace', [9182]], ['OverBracket', [9140]], ['OverParenthesis', [9180]], ['para', [182]], ['parallel', [8741]], ['par', [8741]], ['parsim', [10995]], ['parsl', [11005]], ['part', [8706]], ['PartialD', [8706]], ['Pcy', [1055]], ['pcy', [1087]], ['percnt', [37]], ['period', [46]], ['permil', [8240]], ['perp', [8869]], ['pertenk', [8241]], ['Pfr', [120083]], ['pfr', [120109]], ['Phi', [934]], ['phi', [966]], ['phiv', [981]], ['phmmat', [8499]], ['phone', [9742]], ['Pi', [928]], ['pi', [960]], ['pitchfork', [8916]], ['piv', [982]], ['planck', [8463]], ['planckh', [8462]], ['plankv', [8463]], ['plusacir', [10787]], ['plusb', [8862]], ['pluscir', [10786]], ['plus', [43]], ['plusdo', [8724]], ['plusdu', [10789]], ['pluse', [10866]], ['PlusMinus', [177]], ['plusmn', [177]], ['plussim', [10790]], ['plustwo', [10791]], ['pm', [177]], ['Poincareplane', [8460]], ['pointint', [10773]], ['popf', [120161]], ['Popf', [8473]], ['pound', [163]], ['prap', [10935]], ['Pr', [10939]], ['pr', [8826]], ['prcue', [8828]], ['precapprox', [10935]], ['prec', [8826]], ['preccurlyeq', [8828]], ['Precedes', [8826]], ['PrecedesEqual', [10927]], ['PrecedesSlantEqual', [8828]], ['PrecedesTilde', [8830]], ['preceq', [10927]], ['precnapprox', [10937]], ['precneqq', [10933]], ['precnsim', [8936]], ['pre', [10927]], ['prE', [10931]], ['precsim', [8830]], ['prime', [8242]], ['Prime', [8243]], ['primes', [8473]], ['prnap', [10937]], ['prnE', [10933]], ['prnsim', [8936]], ['prod', [8719]], ['Product', [8719]], ['profalar', [9006]], ['profline', [8978]], ['profsurf', [8979]], ['prop', [8733]], ['Proportional', [8733]], ['Proportion', [8759]], ['propto', [8733]], ['prsim', [8830]], ['prurel', [8880]], ['Pscr', [119979]], ['pscr', [120005]], ['Psi', [936]], ['psi', [968]], ['puncsp', [8200]], ['Qfr', [120084]], ['qfr', [120110]], ['qint', [10764]], ['qopf', [120162]], ['Qopf', [8474]], ['qprime', [8279]], ['Qscr', [119980]], ['qscr', [120006]], ['quaternions', [8461]], ['quatint', [10774]], ['quest', [63]], ['questeq', [8799]], ['quot', [34]], ['QUOT', [34]], ['rAarr', [8667]], ['race', [8765, 817]], ['Racute', [340]], ['racute', [341]], ['radic', [8730]], ['raemptyv', [10675]], ['rang', [10217]], ['Rang', [10219]], ['rangd', [10642]], ['range', [10661]], ['rangle', [10217]], ['raquo', [187]], ['rarrap', [10613]], ['rarrb', [8677]], ['rarrbfs', [10528]], ['rarrc', [10547]], ['rarr', [8594]], ['Rarr', [8608]], ['rArr', [8658]], ['rarrfs', [10526]], ['rarrhk', [8618]], ['rarrlp', [8620]], ['rarrpl', [10565]], ['rarrsim', [10612]], ['Rarrtl', [10518]], ['rarrtl', [8611]], ['rarrw', [8605]], ['ratail', [10522]], ['rAtail', [10524]], ['ratio', [8758]], ['rationals', [8474]], ['rbarr', [10509]], ['rBarr', [10511]], ['RBarr', [10512]], ['rbbrk', [10099]], ['rbrace', [125]], ['rbrack', [93]], ['rbrke', [10636]], ['rbrksld', [10638]], ['rbrkslu', [10640]], ['Rcaron', [344]], ['rcaron', [345]], ['Rcedil', [342]], ['rcedil', [343]], ['rceil', [8969]], ['rcub', [125]], ['Rcy', [1056]], ['rcy', [1088]], ['rdca', [10551]], ['rdldhar', [10601]], ['rdquo', [8221]], ['rdquor', [8221]], ['CloseCurlyDoubleQuote', [8221]], ['rdsh', [8627]], ['real', [8476]], ['realine', [8475]], ['realpart', [8476]], ['reals', [8477]], ['Re', [8476]], ['rect', [9645]], ['reg', [174]], ['REG', [174]], ['ReverseElement', [8715]], ['ReverseEquilibrium', [8651]], ['ReverseUpEquilibrium', [10607]], ['rfisht', [10621]], ['rfloor', [8971]], ['rfr', [120111]], ['Rfr', [8476]], ['rHar', [10596]], ['rhard', [8641]], ['rharu', [8640]], ['rharul', [10604]], ['Rho', [929]], ['rho', [961]], ['rhov', [1009]], ['RightAngleBracket', [10217]], ['RightArrowBar', [8677]], ['rightarrow', [8594]], ['RightArrow', [8594]], ['Rightarrow', [8658]], ['RightArrowLeftArrow', [8644]], ['rightarrowtail', [8611]], ['RightCeiling', [8969]], ['RightDoubleBracket', [10215]], ['RightDownTeeVector', [10589]], ['RightDownVectorBar', [10581]], ['RightDownVector', [8642]], ['RightFloor', [8971]], ['rightharpoondown', [8641]], ['rightharpoonup', [8640]], ['rightleftarrows', [8644]], ['rightleftharpoons', [8652]], ['rightrightarrows', [8649]], ['rightsquigarrow', [8605]], ['RightTeeArrow', [8614]], ['RightTee', [8866]], ['RightTeeVector', [10587]], ['rightthreetimes', [8908]], ['RightTriangleBar', [10704]], ['RightTriangle', [8883]], ['RightTriangleEqual', [8885]], ['RightUpDownVector', [10575]], ['RightUpTeeVector', [10588]], ['RightUpVectorBar', [10580]], ['RightUpVector', [8638]], ['RightVectorBar', [10579]], ['RightVector', [8640]], ['ring', [730]], ['risingdotseq', [8787]], ['rlarr', [8644]], ['rlhar', [8652]], ['rlm', [8207]], ['rmoustache', [9137]], ['rmoust', [9137]], ['rnmid', [10990]], ['roang', [10221]], ['roarr', [8702]], ['robrk', [10215]], ['ropar', [10630]], ['ropf', [120163]], ['Ropf', [8477]], ['roplus', [10798]], ['rotimes', [10805]], ['RoundImplies', [10608]], ['rpar', [41]], ['rpargt', [10644]], ['rppolint', [10770]], ['rrarr', [8649]], ['Rrightarrow', [8667]], ['rsaquo', [8250]], ['rscr', [120007]], ['Rscr', [8475]], ['rsh', [8625]], ['Rsh', [8625]], ['rsqb', [93]], ['rsquo', [8217]], ['rsquor', [8217]], ['CloseCurlyQuote', [8217]], ['rthree', [8908]], ['rtimes', [8906]], ['rtri', [9657]], ['rtrie', [8885]], ['rtrif', [9656]], ['rtriltri', [10702]], ['RuleDelayed', [10740]], ['ruluhar', [10600]], ['rx', [8478]], ['Sacute', [346]], ['sacute', [347]], ['sbquo', [8218]], ['scap', [10936]], ['Scaron', [352]], ['scaron', [353]], ['Sc', [10940]], ['sc', [8827]], ['sccue', [8829]], ['sce', [10928]], ['scE', [10932]], ['Scedil', [350]], ['scedil', [351]], ['Scirc', [348]], ['scirc', [349]], ['scnap', [10938]], ['scnE', [10934]], ['scnsim', [8937]], ['scpolint', [10771]], ['scsim', [8831]], ['Scy', [1057]], ['scy', [1089]], ['sdotb', [8865]], ['sdot', [8901]], ['sdote', [10854]], ['searhk', [10533]], ['searr', [8600]], ['seArr', [8664]], ['searrow', [8600]], ['sect', [167]], ['semi', [59]], ['seswar', [10537]], ['setminus', [8726]], ['setmn', [8726]], ['sext', [10038]], ['Sfr', [120086]], ['sfr', [120112]], ['sfrown', [8994]], ['sharp', [9839]], ['SHCHcy', [1065]], ['shchcy', [1097]], ['SHcy', [1064]], ['shcy', [1096]], ['ShortDownArrow', [8595]], ['ShortLeftArrow', [8592]], ['shortmid', [8739]], ['shortparallel', [8741]], ['ShortRightArrow', [8594]], ['ShortUpArrow', [8593]], ['shy', [173]], ['Sigma', [931]], ['sigma', [963]], ['sigmaf', [962]], ['sigmav', [962]], ['sim', [8764]], ['simdot', [10858]], ['sime', [8771]], ['simeq', [8771]], ['simg', [10910]], ['simgE', [10912]], ['siml', [10909]], ['simlE', [10911]], ['simne', [8774]], ['simplus', [10788]], ['simrarr', [10610]], ['slarr', [8592]], ['SmallCircle', [8728]], ['smallsetminus', [8726]], ['smashp', [10803]], ['smeparsl', [10724]], ['smid', [8739]], ['smile', [8995]], ['smt', [10922]], ['smte', [10924]], ['smtes', [10924, 65024]], ['SOFTcy', [1068]], ['softcy', [1100]], ['solbar', [9023]], ['solb', [10692]], ['sol', [47]], ['Sopf', [120138]], ['sopf', [120164]], ['spades', [9824]], ['spadesuit', [9824]], ['spar', [8741]], ['sqcap', [8851]], ['sqcaps', [8851, 65024]], ['sqcup', [8852]], ['sqcups', [8852, 65024]], ['Sqrt', [8730]], ['sqsub', [8847]], ['sqsube', [8849]], ['sqsubset', [8847]], ['sqsubseteq', [8849]], ['sqsup', [8848]], ['sqsupe', [8850]], ['sqsupset', [8848]], ['sqsupseteq', [8850]], ['square', [9633]], ['Square', [9633]], ['SquareIntersection', [8851]], ['SquareSubset', [8847]], ['SquareSubsetEqual', [8849]], ['SquareSuperset', [8848]], ['SquareSupersetEqual', [8850]], ['SquareUnion', [8852]], ['squarf', [9642]], ['squ', [9633]], ['squf', [9642]], ['srarr', [8594]], ['Sscr', [119982]], ['sscr', [120008]], ['ssetmn', [8726]], ['ssmile', [8995]], ['sstarf', [8902]], ['Star', [8902]], ['star', [9734]], ['starf', [9733]], ['straightepsilon', [1013]], ['straightphi', [981]], ['strns', [175]], ['sub', [8834]], ['Sub', [8912]], ['subdot', [10941]], ['subE', [10949]], ['sube', [8838]], ['subedot', [10947]], ['submult', [10945]], ['subnE', [10955]], ['subne', [8842]], ['subplus', [10943]], ['subrarr', [10617]], ['subset', [8834]], ['Subset', [8912]], ['subseteq', [8838]], ['subseteqq', [10949]], ['SubsetEqual', [8838]], ['subsetneq', [8842]], ['subsetneqq', [10955]], ['subsim', [10951]], ['subsub', [10965]], ['subsup', [10963]], ['succapprox', [10936]], ['succ', [8827]], ['succcurlyeq', [8829]], ['Succeeds', [8827]], ['SucceedsEqual', [10928]], ['SucceedsSlantEqual', [8829]], ['SucceedsTilde', [8831]], ['succeq', [10928]], ['succnapprox', [10938]], ['succneqq', [10934]], ['succnsim', [8937]], ['succsim', [8831]], ['SuchThat', [8715]], ['sum', [8721]], ['Sum', [8721]], ['sung', [9834]], ['sup1', [185]], ['sup2', [178]], ['sup3', [179]], ['sup', [8835]], ['Sup', [8913]], ['supdot', [10942]], ['supdsub', [10968]], ['supE', [10950]], ['supe', [8839]], ['supedot', [10948]], ['Superset', [8835]], ['SupersetEqual', [8839]], ['suphsol', [10185]], ['suphsub', [10967]], ['suplarr', [10619]], ['supmult', [10946]], ['supnE', [10956]], ['supne', [8843]], ['supplus', [10944]], ['supset', [8835]], ['Supset', [8913]], ['supseteq', [8839]], ['supseteqq', [10950]], ['supsetneq', [8843]], ['supsetneqq', [10956]], ['supsim', [10952]], ['supsub', [10964]], ['supsup', [10966]], ['swarhk', [10534]], ['swarr', [8601]], ['swArr', [8665]], ['swarrow', [8601]], ['swnwar', [10538]], ['szlig', [223]], ['Tab', [9]], ['target', [8982]], ['Tau', [932]], ['tau', [964]], ['tbrk', [9140]], ['Tcaron', [356]], ['tcaron', [357]], ['Tcedil', [354]], ['tcedil', [355]], ['Tcy', [1058]], ['tcy', [1090]], ['tdot', [8411]], ['telrec', [8981]], ['Tfr', [120087]], ['tfr', [120113]], ['there4', [8756]], ['therefore', [8756]], ['Therefore', [8756]], ['Theta', [920]], ['theta', [952]], ['thetasym', [977]], ['thetav', [977]], ['thickapprox', [8776]], ['thicksim', [8764]], ['ThickSpace', [8287, 8202]], ['ThinSpace', [8201]], ['thinsp', [8201]], ['thkap', [8776]], ['thksim', [8764]], ['THORN', [222]], ['thorn', [254]], ['tilde', [732]], ['Tilde', [8764]], ['TildeEqual', [8771]], ['TildeFullEqual', [8773]], ['TildeTilde', [8776]], ['timesbar', [10801]], ['timesb', [8864]], ['times', [215]], ['timesd', [10800]], ['tint', [8749]], ['toea', [10536]], ['topbot', [9014]], ['topcir', [10993]], ['top', [8868]], ['Topf', [120139]], ['topf', [120165]], ['topfork', [10970]], ['tosa', [10537]], ['tprime', [8244]], ['trade', [8482]], ['TRADE', [8482]], ['triangle', [9653]], ['triangledown', [9663]], ['triangleleft', [9667]], ['trianglelefteq', [8884]], ['triangleq', [8796]], ['triangleright', [9657]], ['trianglerighteq', [8885]], ['tridot', [9708]], ['trie', [8796]], ['triminus', [10810]], ['TripleDot', [8411]], ['triplus', [10809]], ['trisb', [10701]], ['tritime', [10811]], ['trpezium', [9186]], ['Tscr', [119983]], ['tscr', [120009]], ['TScy', [1062]], ['tscy', [1094]], ['TSHcy', [1035]], ['tshcy', [1115]], ['Tstrok', [358]], ['tstrok', [359]], ['twixt', [8812]], ['twoheadleftarrow', [8606]], ['twoheadrightarrow', [8608]], ['Uacute', [218]], ['uacute', [250]], ['uarr', [8593]], ['Uarr', [8607]], ['uArr', [8657]], ['Uarrocir', [10569]], ['Ubrcy', [1038]], ['ubrcy', [1118]], ['Ubreve', [364]], ['ubreve', [365]], ['Ucirc', [219]], ['ucirc', [251]], ['Ucy', [1059]], ['ucy', [1091]], ['udarr', [8645]], ['Udblac', [368]], ['udblac', [369]], ['udhar', [10606]], ['ufisht', [10622]], ['Ufr', [120088]], ['ufr', [120114]], ['Ugrave', [217]], ['ugrave', [249]], ['uHar', [10595]], ['uharl', [8639]], ['uharr', [8638]], ['uhblk', [9600]], ['ulcorn', [8988]], ['ulcorner', [8988]], ['ulcrop', [8975]], ['ultri', [9720]], ['Umacr', [362]], ['umacr', [363]], ['uml', [168]], ['UnderBar', [95]], ['UnderBrace', [9183]], ['UnderBracket', [9141]], ['UnderParenthesis', [9181]], ['Union', [8899]], ['UnionPlus', [8846]], ['Uogon', [370]], ['uogon', [371]], ['Uopf', [120140]], ['uopf', [120166]], ['UpArrowBar', [10514]], ['uparrow', [8593]], ['UpArrow', [8593]], ['Uparrow', [8657]], ['UpArrowDownArrow', [8645]], ['updownarrow', [8597]], ['UpDownArrow', [8597]], ['Updownarrow', [8661]], ['UpEquilibrium', [10606]], ['upharpoonleft', [8639]], ['upharpoonright', [8638]], ['uplus', [8846]], ['UpperLeftArrow', [8598]], ['UpperRightArrow', [8599]], ['upsi', [965]], ['Upsi', [978]], ['upsih', [978]], ['Upsilon', [933]], ['upsilon', [965]], ['UpTeeArrow', [8613]], ['UpTee', [8869]], ['upuparrows', [8648]], ['urcorn', [8989]], ['urcorner', [8989]], ['urcrop', [8974]], ['Uring', [366]], ['uring', [367]], ['urtri', [9721]], ['Uscr', [119984]], ['uscr', [120010]], ['utdot', [8944]], ['Utilde', [360]], ['utilde', [361]], ['utri', [9653]], ['utrif', [9652]], ['uuarr', [8648]], ['Uuml', [220]], ['uuml', [252]], ['uwangle', [10663]], ['vangrt', [10652]], ['varepsilon', [1013]], ['varkappa', [1008]], ['varnothing', [8709]], ['varphi', [981]], ['varpi', [982]], ['varpropto', [8733]], ['varr', [8597]], ['vArr', [8661]], ['varrho', [1009]], ['varsigma', [962]], ['varsubsetneq', [8842, 65024]], ['varsubsetneqq', [10955, 65024]], ['varsupsetneq', [8843, 65024]], ['varsupsetneqq', [10956, 65024]], ['vartheta', [977]], ['vartriangleleft', [8882]], ['vartriangleright', [8883]], ['vBar', [10984]], ['Vbar', [10987]], ['vBarv', [10985]], ['Vcy', [1042]], ['vcy', [1074]], ['vdash', [8866]], ['vDash', [8872]], ['Vdash', [8873]], ['VDash', [8875]], ['Vdashl', [10982]], ['veebar', [8891]], ['vee', [8744]], ['Vee', [8897]], ['veeeq', [8794]], ['vellip', [8942]], ['verbar', [124]], ['Verbar', [8214]], ['vert', [124]], ['Vert', [8214]], ['VerticalBar', [8739]], ['VerticalLine', [124]], ['VerticalSeparator', [10072]], ['VerticalTilde', [8768]], ['VeryThinSpace', [8202]], ['Vfr', [120089]], ['vfr', [120115]], ['vltri', [8882]], ['vnsub', [8834, 8402]], ['vnsup', [8835, 8402]], ['Vopf', [120141]], ['vopf', [120167]], ['vprop', [8733]], ['vrtri', [8883]], ['Vscr', [119985]], ['vscr', [120011]], ['vsubnE', [10955, 65024]], ['vsubne', [8842, 65024]], ['vsupnE', [10956, 65024]], ['vsupne', [8843, 65024]], ['Vvdash', [8874]], ['vzigzag', [10650]], ['Wcirc', [372]], ['wcirc', [373]], ['wedbar', [10847]], ['wedge', [8743]], ['Wedge', [8896]], ['wedgeq', [8793]], ['weierp', [8472]], ['Wfr', [120090]], ['wfr', [120116]], ['Wopf', [120142]], ['wopf', [120168]], ['wp', [8472]], ['wr', [8768]], ['wreath', [8768]], ['Wscr', [119986]], ['wscr', [120012]], ['xcap', [8898]], ['xcirc', [9711]], ['xcup', [8899]], ['xdtri', [9661]], ['Xfr', [120091]], ['xfr', [120117]], ['xharr', [10231]], ['xhArr', [10234]], ['Xi', [926]], ['xi', [958]], ['xlarr', [10229]], ['xlArr', [10232]], ['xmap', [10236]], ['xnis', [8955]], ['xodot', [10752]], ['Xopf', [120143]], ['xopf', [120169]], ['xoplus', [10753]], ['xotime', [10754]], ['xrarr', [10230]], ['xrArr', [10233]], ['Xscr', [119987]], ['xscr', [120013]], ['xsqcup', [10758]], ['xuplus', [10756]], ['xutri', [9651]], ['xvee', [8897]], ['xwedge', [8896]], ['Yacute', [221]], ['yacute', [253]], ['YAcy', [1071]], ['yacy', [1103]], ['Ycirc', [374]], ['ycirc', [375]], ['Ycy', [1067]], ['ycy', [1099]], ['yen', [165]], ['Yfr', [120092]], ['yfr', [120118]], ['YIcy', [1031]], ['yicy', [1111]], ['Yopf', [120144]], ['yopf', [120170]], ['Yscr', [119988]], ['yscr', [120014]], ['YUcy', [1070]], ['yucy', [1102]], ['yuml', [255]], ['Yuml', [376]], ['Zacute', [377]], ['zacute', [378]], ['Zcaron', [381]], ['zcaron', [382]], ['Zcy', [1047]], ['zcy', [1079]], ['Zdot', [379]], ['zdot', [380]], ['zeetrf', [8488]], ['ZeroWidthSpace', [8203]], ['Zeta', [918]], ['zeta', [950]], ['zfr', [120119]], ['Zfr', [8488]], ['ZHcy', [1046]], ['zhcy', [1078]], ['zigrarr', [8669]], ['zopf', [120171]], ['Zopf', [8484]], ['Zscr', [119989]], ['zscr', [120015]], ['zwj', [8205]], ['zwnj', [8204]]];\n\nvar alphaIndex = {};\nvar charIndex = {};\n\ncreateIndexes(alphaIndex, charIndex);\n\n/**\n * @constructor\n */\nfunction Html5Entities() {}\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml5Entities.prototype.decode = function(str) {\n    if (!str || !str.length) {\n        return '';\n    }\n    return str.replace(/&(#?[\\w\\d]+);?/g, function(s, entity) {\n        var chr;\n        if (entity.charAt(0) === \"#\") {\n            var code = entity.charAt(1) === 'x' ?\n                parseInt(entity.substr(2).toLowerCase(), 16) :\n                parseInt(entity.substr(1));\n\n            if (!(isNaN(code) || code < -32768 || code > 65535)) {\n                chr = String.fromCharCode(code);\n            }\n        } else {\n            chr = alphaIndex[entity];\n        }\n        return chr || s;\n    });\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\n Html5Entities.decode = function(str) {\n    return new Html5Entities().decode(str);\n };\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml5Entities.prototype.encode = function(str) {\n    if (!str || !str.length) {\n        return '';\n    }\n    var strLength = str.length;\n    var result = '';\n    var i = 0;\n    while (i < strLength) {\n        var charInfo = charIndex[str.charCodeAt(i)];\n        if (charInfo) {\n            var alpha = charInfo[str.charCodeAt(i + 1)];\n            if (alpha) {\n                i++;\n            } else {\n                alpha = charInfo[''];\n            }\n            if (alpha) {\n                result += \"&\" + alpha + \";\";\n                i++;\n                continue;\n            }\n        }\n        result += str.charAt(i);\n        i++;\n    }\n    return result;\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\n Html5Entities.encode = function(str) {\n    return new Html5Entities().encode(str);\n };\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml5Entities.prototype.encodeNonUTF = function(str) {\n    if (!str || !str.length) {\n        return '';\n    }\n    var strLength = str.length;\n    var result = '';\n    var i = 0;\n    while (i < strLength) {\n        var c = str.charCodeAt(i);\n        var charInfo = charIndex[c];\n        if (charInfo) {\n            var alpha = charInfo[str.charCodeAt(i + 1)];\n            if (alpha) {\n                i++;\n            } else {\n                alpha = charInfo[''];\n            }\n            if (alpha) {\n                result += \"&\" + alpha + \";\";\n                i++;\n                continue;\n            }\n        }\n        if (c < 32 || c > 126) {\n            result += '&#' + c + ';';\n        } else {\n            result += str.charAt(i);\n        }\n        i++;\n    }\n    return result;\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\n Html5Entities.encodeNonUTF = function(str) {\n    return new Html5Entities().encodeNonUTF(str);\n };\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml5Entities.prototype.encodeNonASCII = function(str) {\n    if (!str || !str.length) {\n        return '';\n    }\n    var strLength = str.length;\n    var result = '';\n    var i = 0;\n    while (i < strLength) {\n        var c = str.charCodeAt(i);\n        if (c <= 255) {\n            result += str[i++];\n            continue;\n        }\n        result += '&#' + c + ';';\n        i++\n    }\n    return result;\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\n Html5Entities.encodeNonASCII = function(str) {\n    return new Html5Entities().encodeNonASCII(str);\n };\n\n/**\n * @param {Object} alphaIndex Passed by reference.\n * @param {Object} charIndex Passed by reference.\n */\nfunction createIndexes(alphaIndex, charIndex) {\n    var i = ENTITIES.length;\n    var _results = [];\n    while (i--) {\n        var e = ENTITIES[i];\n        var alpha = e[0];\n        var chars = e[1];\n        var chr = chars[0];\n        var addChar = (chr < 32 || chr > 126) || chr === 62 || chr === 60 || chr === 38 || chr === 34 || chr === 39;\n        var charInfo;\n        if (addChar) {\n            charInfo = charIndex[chr] = charIndex[chr] || {};\n        }\n        if (chars[1]) {\n            var chr2 = chars[1];\n            alphaIndex[alpha] = String.fromCharCode(chr) + String.fromCharCode(chr2);\n            _results.push(addChar && (charInfo[chr2] = alpha));\n        } else {\n            alphaIndex[alpha] = String.fromCharCode(chr);\n            _results.push(addChar && (charInfo[''] = alpha));\n        }\n    }\n}\n\nmodule.exports = Html5Entities;\n","const ppInclude = require('./ppInclude-browser')\nconst markedpp = require('./markedpp')\nmarkedpp.ppInclude = ppInclude\n\nmodule.exports = markedpp\n","/* globals XMLHttpRequest,location */\n\n/*\n * code from <https://github.com/joyent/node/blob/master/lib/path.js>\n * @credits Joyent\n */\nconst path = {\n  normalizeArray: function (parts, allowAboveRoot) {\n    // if the path tries to go above the root, `up` ends up > 0\n    let up = 0\n    for (let i = parts.length - 1; i >= 0; i--) {\n      const last = parts[i]\n      if (last === '.') {\n        parts.splice(i, 1)\n      } else if (last === '..') {\n        parts.splice(i, 1)\n        up++\n      } else if (up) {\n        parts.splice(i, 1)\n        up--\n      }\n    }\n\n    // if the path is allowed to go above the root, restore leading ..s\n    if (allowAboveRoot) {\n      for (; up--; up) {\n        parts.unshift('..')\n      }\n    }\n\n    return parts\n  },\n  resolve: function () {\n    let resolvedPath = ''\n    let resolvedAbsolute = false\n\n    for (let i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      const path = (i >= 0) ? arguments[i] : '/'\n\n      // Skip empty and invalid entries\n      if (!path) {\n        continue\n      }\n\n      resolvedPath = path + '/' + resolvedPath\n      resolvedAbsolute = path.charAt(0) === '/'\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = this.normalizeArray(resolvedPath.split('/').filter(function (p) {\n      return !!p\n    }), !resolvedAbsolute).join('/')\n\n    return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.'\n  },\n  splitPathRe: /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^/]+?|)(\\.[^./]*|))(?:[/]*)$/,\n  splitPath: function (filename) {\n    return this.splitPathRe.exec(filename).slice(1)\n  },\n  dirname: function (path) {\n    const result = this.splitPath(path)\n    const root = result[0]\n    let dir = result[1]\n\n    if (!root && !dir) {\n      // No dirname whatsoever\n      return '.'\n    }\n\n    if (dir) {\n      // It has a dirname, strip trailing slash\n      dir = dir.substr(0, dir.length - 1)\n    }\n\n    return root + dir\n  },\n  join: function () {\n    return Array.prototype.slice.call(arguments).join('/')\n  }\n}\n\n/*\n * code from <https://github.com/caolan/async.git>\n * @credits Caolan McMahon\n */\nconst async = {\n  _eachLimit: function (limit) {\n    return function (arr, iterator, callback) {\n      callback = callback || function () {}\n      if (!arr.length || limit <= 0) {\n        return callback()\n      }\n      let completed = 0\n      let started = 0\n      let running = 0;\n\n      (function replenish () {\n        if (completed >= arr.length) {\n          return callback()\n        }\n\n        while (running < limit && started < arr.length) {\n          started += 1\n          running += 1\n          iterator(arr[started - 1], function (err) {\n            if (err) {\n              callback(err)\n              callback = function () {}\n            } else {\n              completed += 1\n              running -= 1\n              if (completed >= arr.length) {\n                callback()\n              } else {\n                replenish()\n              }\n            }\n          }) // jshint ignore:line\n        }\n      })()\n    }\n  },\n  eachLimit: function (arr, limit, iterator, callback) {\n    const fn = this._eachLimit(limit)\n    fn(arr, iterator, callback)\n  }\n}\n\n/*\n * XHR Request\n * adapted code from <https://github.com/xui/xui/blob/master/src/js/xhr.js>\n * @credits Brian LeRoux, Brock Whitten, Rob Ellis\n */\nfunction xhr (url, options, callback) {\n  if (typeof options === 'function') {\n    callback = options\n    options = null\n  }\n  const o = options || {}\n  const req = new XMLHttpRequest()\n  const method = o.method || 'get'\n  const params = o.data || null\n\n  req.queryString = params\n  req.open(method, url, true)\n  req.setRequestHeader('X-Requested-With', 'XMLHttpRequest')\n\n  if (method.toLowerCase() === 'post') {\n    req.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')\n  }\n\n  for (let key in o.headers) {\n    if (o.headers.hasOwnProperty(key)) {\n      req.setRequestHeader(key, o.headers[key])\n    }\n  }\n\n  function stateChange () {\n    if (req.readyState === 4) {\n      if ((/^[20]/).test(req.status)) {\n        callback(null, req.responseText)\n      } else if ((/^[45]/).test(req.status)) {\n        callback(new Error(req.status))\n      }\n    }\n  }\n\n  req.onreadystatechange = stateChange\n\n  try {\n    req.send(params)\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log('Error: Resolving URL ' + url)\n    callback(e)\n  }\n}\n\n/**\n * Include and Lex files\n * @param {Array} tokens - array of tokens\n * @param {Object} options - options to overwrite\n * @param {String} options.dirname - base directory from where to search files to include (If not specified then current working directory is used)\n * @param {Function} callback - `function(err, tokens)`\n */\nfunction ppInclude (tokens, Lexer, options, callback) {\n  const dirname = options.dirname || path.dirname(location.pathname)\n  const lexed = {}\n  const _options = Object.assign({}, options)\n  _options.tags = false\n\n  // ppInclude is used to detect recursions\n  if (!_options.ppInclude) {\n    _options.ppInclude = {}\n  }\n\n  async.eachLimit(tokens, 5, function (token, done) {\n    if (token.type === 'ppinclude' &&\n        typeof token.text === 'string' &&\n        !_options.ppInclude[token.text]) {\n      const path_ = path.resolve(path.join(dirname, token.text))\n      const url = location.protocol + '//' + location.host + path_\n\n      xhr(url, function (err, src) {\n        _options.ppInclude[token.text] = 1\n        _options.dirname = path.dirname(path_)\n        if (err) {\n          // eslint-disable-next-line no-console\n          console.log('Error: ' + err.message)\n          return done()\n        }\n        const lexer = new Lexer(_options)\n        const sep = '\\n' + token.indent\n        src = token.indent + src.split('\\n').join(sep)\n        if (src.substr(0 - sep.length) === sep) {\n          src = src.substr(0, src.length - sep.length + 1)\n        }\n        ppInclude(lexer.lex(src), Lexer, _options, function (err, ntokens) {\n          if (err) {\n            // TODO\n          }\n          lexed[token.text] = ntokens\n          done()\n        })\n      })\n    } else {\n      done()\n    }\n  },\n  function () {\n    const _tokens = []\n\n    // compose the new tokens array\n    tokens.forEach(function (token) {\n      if (token.type === 'ppinclude' &&\n          typeof token.text === 'string' &&\n          lexed[token.text] !== undefined) {\n        _tokens.push({\n          type: 'ppinclude_start',\n          text: token.text,\n          indent: token.indent,\n          lang: token.lang,\n          tags: options.tags\n        })\n        lexed[token.text].forEach(function (token) {\n          _tokens.push(Object.assign({}, token)) // clone tokens!\n        })\n        _tokens.push({\n          type: 'ppinclude_end',\n          indent: token.indent,\n          lang: token.lang,\n          tags: options.tags\n        })\n      } else {\n        _tokens.push(token)\n      }\n    })\n    callback(null, _tokens)\n  })\n}\n\nmodule.exports = ppInclude\n","/*!\n * markedpp\n *\n * A preprocessor for markdown files\n *\n * @copyright 2014 commenthol\n * @licence MIT\n *\n * @note Code inspired by `marked` project\n * @credits Christopher Jeffrey <https://github.com/chjj/marked>\n */\n\nconst Lexer = require('./Lexer')\nconst InlineLexer = require('./InlineLexer')\nconst Parser = require('./Parser')\nconst Renderer = require('./Renderer')\nconst defaults = require('./defaults')\n\n/**\n * Markdown Preprocessor\n *\n * @module markedpp\n * @param {String} src - markdown source to preprocess\n * @param {Object} options - options\n * @param {String} options.dirname - dirname of markdown source file - required to include other files\n * @param {Function} callback - callback function\n * ```\n * function({Error} err, {String} data)\n * ```\n */\nfunction markedpp (src, options, callback) {\n  if (typeof options === 'function') {\n    callback = options\n    options = null\n  }\n\n  options = Object.assign({}, defaults, options || {})\n\n  Lexer.lex(markedpp.ppInclude, src, options, function (err, tokens) {\n    let out = tokens\n    if (!err && tokens) {\n      out = Parser.parse(tokens, options)\n    }\n    callback(err, out)\n  })\n}\n\n/**\n * exports\n */\nmarkedpp.defaults = defaults\nmarkedpp.Lexer = Lexer\nmarkedpp.InlineLexer = InlineLexer\nmarkedpp.Renderer = Renderer\nmarkedpp.Parser = Parser\n\nmodule.exports = markedpp\n","const InlineLexer = require('./InlineLexer')\nconst {\n  block\n} = require('./rules')\nconst {\n  int,\n  repeat\n} = require('./utils')\nconst defaults = require('./defaults')\n\nconst KEY = /^(.+)$/\nconst KEYVALUE = /^([a-z0-9]+)=(.*)$/\nconst KEYVALUES = /^([a-z0-9]+)=([\"'])(.*?)\\2$/\n\n/**\n * Lexer\n * @constructor\n * @param {Object} options - overwrites default options\n */\nfunction Lexer (options) {\n  this.tokens = []\n  this.options = options || defaults\n  this.rules = block\n  if (this.options.gfm) {\n    Object.assign(this.rules, block.opts.gfm)\n  }\n  if (this.options.include) {\n    Object.assign(this.rules, block.opts.include)\n  }\n  if (this.options.numberedheadings) {\n    Object.assign(this.rules, block.opts.numberedheadings)\n  }\n  if (this.options.toc) {\n    Object.assign(this.rules, block.opts.toc)\n  }\n  if (this.options.ref) {\n    Object.assign(this.rules, block.opts.ref)\n  }\n}\n\n/**\n * Preprocessing\n * @param {String} src - markdown source\n * @return {Object} token\n */\nLexer.prototype.lex = function (src) {\n  src = src\n    .replace(/\\r\\n|\\r/g, '\\n')\n    .replace(/\\t/g, '    ')\n    .replace(/\\u00a0/g, ' ')\n    .replace(/\\u2424/g, '\\n')\n\n  // ~ src = src.replace(/\\n/g, '↩\\n').replace(/ /g, '·') // TODO - debugging\n  return this.token(src, true)\n}\n\n/**\n * Lexing\n * @param {String} src - markdown source\n * @param {Boolean} top -\n * @return {Array} - array of tokens\n */\nLexer.prototype.token = function (src, top) {\n  let cap,\n    bull,\n    next,\n    l,\n    b,\n    i,\n    item,\n    space,\n    loose,\n    bq,\n    tmp,\n    opts\n\n  while (src) {\n    // newline\n    if ((cap = this.rules.newline.exec(src))) {\n      src = src.substring(cap[0].length)\n      this.tokens.push({\n        type: 'space',\n        text: cap[0]\n      })\n    }\n    // ppinclude\n    if ((cap = this.rules.ppinclude.exec(src))) {\n      src = src.substring(cap[0].length)\n      tmp = cap[2] || cap[3] || cap[4]\n      opts = Lexer.splitOpts(tmp)\n      tmp = tmp.replace(/ *(?:[a-z]+=[a-z0-9-]+)/, '').replace(/\\\\ /g, ' ')\n      this.tokens.push({\n        type: 'ppinclude',\n        text: tmp,\n        indent: opts.indent ? repeat(' ', opts.indent) : cap[1],\n        lang: opts.lang\n      })\n      continue\n    }\n    // code\n    if ((cap = this.rules.code.exec(src))) {\n      src = src.substring(cap[0].length)\n      this.tokens.push({\n        type: 'code',\n        text: cap[0]\n      })\n      continue\n    }\n    // fences (gfm)\n    if ((cap = this.rules.fences.exec(src))) {\n      src = src.substring(cap[0].length)\n      this.tokens.push({\n        type: 'fences',\n        indent: cap[1],\n        fences: cap[2],\n        lang: cap[3],\n        text: cap[4]\n      })\n      continue\n    }\n    /*\n     * heading\n     * cap[1] - headingid from <a name=\"\">\n     * cap[2] - heading char\n     * cap[3] - heading text\n     */\n    if ((cap = this.rules.heading.exec(src))) {\n      src = src.substring(cap[0].length)\n      tmp = new InlineLexer(this.options)\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[2].length,\n        text: cap[3],\n        raw: cap[3],\n        autoid: null,\n        anchor: cap[1],\n        inline: tmp.lex(cap[3])\n      })\n      continue\n    }\n    /*\n     * lheading\n     * cap[1] - headingid from <a name=\"\">\n     * cap[2] - heading char\n     * cap[3] - heading text\n     */\n    if ((cap = this.rules.lheading.exec(src))) {\n      src = src.substring(cap[0].length)\n      tmp = new InlineLexer(this.options)\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[3] === '=' ? 1 : 2,\n        text: cap[2],\n        raw: cap[2],\n        autoid: null,\n        anchor: cap[1],\n        inline: tmp.lex(cap[2])\n      })\n      continue\n    }\n    // hr\n    if ((cap = this.rules.hr.exec(src))) {\n      src = src.substring(cap[0].length)\n      this.tokens.push({\n        type: 'hr',\n        text: cap[0]\n      })\n      continue\n    }\n    // blockquote\n    if ((cap = this.rules.blockquote.exec(src))) {\n      src = src.substring(cap[0].length)\n\n      this.tokens.push({\n        type: 'blockquote_start'\n      })\n\n      cap = cap[0].replace(/^ *> ?/gm, '')\n\n      // Pass `top` to keep the current\n      // \"toplevel\" state. This is exactly\n      // how markdown.pl works.\n      this.token(cap, top)\n\n      this.tokens.push({\n        type: 'blockquote_end'\n      })\n\n      continue\n    }\n    // list -\n    if ((cap = this.rules.list.exec(src))) {\n      src = src.substring(cap[0].length)\n      bull = cap[2]\n\n      this.tokens.push({\n        type: 'list_start',\n        ordered: bull.length > 1,\n        start: int(bull, true)\n      })\n\n      // Get each top-level item.\n      cap = cap[0].match(this.rules.item)\n\n      next = false\n      l = cap.length\n      i = 0\n\n      for (; i < l; i++) {\n        item = cap[i]\n        bull = this.rules.bullet.exec(item)[0]\n\n        // Remove the list item's bullet\n        // so it is seen as the next token.\n        space = item.length\n        item = item.replace(/^ *([*+-]|\\d+\\.) +/, '')\n\n        // Outdent whatever the\n        // list item contains. Hacky.\n        if (~item.indexOf('\\n ')) {\n          space -= item.length\n          item = !this.options.pedantic\n            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\n            : item.replace(/^ {1,4}/gm, '')\n        }\n\n        // Determine whether the next list item belongs here.\n        // Backpedal if it does not belong in this list.\n        if (this.options.smartlists && i !== l - 1) {\n          b = this.rules.bullet.exec(cap[i + 1])[0]\n          if (bull !== b && !(bull.length > 1 && b.length > 1)) {\n            src = cap.slice(i + 1).join('\\n') + src\n            i = l - 1\n          }\n        }\n\n        // Determine whether item is loose or not.\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n        // for discount behavior.\n        loose = next || /\\n\\n(?!\\s*$)/.test(item)\n        if (i !== l - 1) {\n          next = item.charAt(item.length - 1) === '\\n'\n          if (!loose) loose = next\n        }\n\n        this.tokens.push({\n          type: loose\n            ? 'loose_item_start'\n            : 'list_item_start',\n          text: bull\n        })\n\n        // Recurse.\n        this.token(item, false, bq)\n\n        this.tokens.push({\n          type: 'list_item_end'\n        })\n      }\n\n      this.tokens.push({\n        type: 'list_end'\n      })\n\n      continue\n    }\n    // ppnumberedheadings\n    if ((cap = this.rules.ppnumberedheadings.exec(src))) {\n      src = src.substring(cap[0].length)\n      opts = Lexer.splitOpts(cap[1] || cap[2])\n      if (typeof opts.omit === 'string') {\n        opts.omit = [opts.omit]\n      }\n      this.options.numberedHeadings = true\n      this.tokens.push({\n        type: 'ppnumberedheadings',\n        level: Lexer.range(opts.level, defaults.minlevel, 6, defaults.level),\n        minlevel: Lexer.range(opts.minlevel, defaults.minlevel, 6),\n        skip: opts.skip,\n        start: opts.start,\n        omit: opts.omit\n      })\n      continue\n    }\n    // pptoc\n    if ((cap = this.rules.pptoc.exec(src))) {\n      src = src.substring(cap[0].length)\n      opts = Lexer.splitOpts(cap[1] || cap[2])\n      if (typeof opts.omit === 'string') {\n        opts.omit = [opts.omit]\n      }\n      this.tokens.push({\n        type: 'pptoc',\n        level: Lexer.range(opts.level, defaults.minlevel, 6, defaults.level),\n        minlevel: Lexer.range(opts.minlevel, defaults.minlevel, 6),\n        numbered: opts.numbered,\n        omit: opts.omit\n      })\n      continue\n    }\n    // ppref\n    if ((cap = this.rules.ppref.exec(src))) {\n      src = src.substring(cap[0].length)\n      this.tokens.push({\n        type: 'ppref'\n      })\n      continue\n    }\n    // html\n    if ((cap = this.rules.html.exec(src))) {\n      src = src.substring(cap[0].length)\n      this.tokens.push({\n        type: 'html',\n        pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n        text: cap[0]\n      })\n      continue\n    }\n    // def\n    if (top && (cap = this.rules.def.exec(src))) {\n      src = src.substring(cap[0].length)\n      this.tokens.push({\n        type: 'def',\n        ref: cap[1],\n        href: cap[2],\n        title: cap[3]\n      })\n      continue\n    }\n    // top-level paragraph\n    if (top && ((cap = this.rules.paragraph.exec(src)))) {\n      src = src.substring(cap[1].length)\n      tmp = new InlineLexer(this.options)\n      this.tokens.push({\n        type: 'paragraph',\n        text: cap[1],\n        inline: tmp.lex(cap[1])\n      })\n      continue\n    }\n    // text\n    if ((cap = this.rules.text.exec(src))) {\n      // Top-level should never reach here.\n      src = src.substring(cap[0].length)\n      tmp = new InlineLexer(this.options)\n      this.tokens.push({\n        type: 'text',\n        text: cap[0], // Todo run InlineLexer\n        inline: tmp.lex(cap[0])\n      })\n      continue\n    }\n    // no match\n    if (src) {\n      // ~ console.log('-->', src); // TODO - debugging\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0))\n    }\n  }\n\n  return this.tokens\n}\n\n/**\n * Expose Block Rules\n */\nLexer.rules = block\n\n/**\n * Static Lex Method\n * @param {String} src - markdown source\n * @param {Object} options - options to overwrite\n * @param {Function} callback - `function(err, tokens)`\n */\nLexer.lex = function (ppInclude, src, options, callback) {\n  const lexer = new Lexer(options)\n  const tokens = lexer.lex(src) // returns the lexed tokens\n  if (options.include) {\n    ppInclude(tokens, Lexer, options, function (err, tokens) {\n      callback(err, tokens, options)\n    })\n  } else {\n    callback(null, tokens, options)\n  }\n}\n\n/**\n * Split preproc command options\n * @param {String} str - string to split into key-value pairs\n */\nLexer.splitOpts = function (str) {\n  const opts = {}\n  let sep\n  let tmp = ''\n\n  ;(str || '').split(' ').forEach(function (s) {\n    if (/\\\\$|^[\"'].*[^\"']$/.test(s) || (sep && !sep.test(s))) {\n      tmp += s + ' '\n      return\n    }\n    if (/=([\"']).*[^\"']$/.test(s)) {\n      sep = s.replace(/^.*=([\"']).*[^\"']$/, '$1')\n      sep = new RegExp(sep + '$')\n      tmp += s + ' '\n      return\n    }\n    if (tmp) {\n      s = tmp + s\n      tmp = ''\n      sep = undefined\n    }\n    if (KEYVALUES.test(s)) {\n      s.replace(KEYVALUES, function (m, key, x, value) {\n        opts[key] = value.split(';')\n        opts[key] = opts[key].map(function (value) {\n          if (/^\\d+$/.test(value)) {\n            const tmp = parseInt(value, 10)\n            if (!isNaN(tmp)) {\n              value = tmp\n            }\n          }\n          return value\n        })\n        if (opts[key].length === 1) {\n          opts[key] = opts[key][0]\n        }\n      })\n    } else if (KEYVALUE.test(s)) {\n      s.replace(KEYVALUE, function (m, key, value) {\n        const tmp = parseInt(value, 10)\n        if (!isNaN(tmp)) {\n          value = tmp\n        }\n        opts[key] = value\n      })\n    } else if (KEY.test(s)) {\n      s = s.replace(/\\\\ /g, ' ').replace(/^([\"'])([^\\1]+)\\1$/, '$2')\n      if (/^!(.*)$/.test(s)) {\n        s = s.replace(/^!(.*)$/, '$1')\n        opts[s] = false\n      } else {\n        opts[s] = true\n      }\n    }\n  })\n\n  return opts\n}\n\n/**\n * Limit the range of input value `val`\n * @param {Number} val - value to check\n * @param {Number} min - min allowed value\n * @param {Number} max - max allowed value\n * @param {Number|undefined} def - default value - if val === def then `undefined` is returned\n * @return {Number} ranged val\n */\nLexer.range = function (val, min, max, def) {\n  if (val < min) {\n    return min\n  } else if (val > max) {\n    return max\n  } else {\n    if (def && val === def) {\n      return undefined\n    }\n    return val\n  }\n}\n\nmodule.exports = Lexer\n","function int (str, undef) {\n  const num = parseInt(str, 10)\n  if (isNaN(num)) {\n    if (undef === true) { return } else { return str }\n  }\n  return num\n}\n\nfunction repeat (str, times) {\n  times = times || 1\n  let ret = ''\n  for (let i = 0; i < times; i++) {\n    ret += str\n  }\n  return ret\n}\n\nmodule.exports = {\n  int,\n  repeat\n}\n","const InlineLexer = require('./InlineLexer')\nconst Renderer = require('./Renderer')\nconst Numbering = require('./Numbering')\nconst defaults = require('./defaults')\nconst Anchor = require('./Anchor')\nconst { MODE } = require('./anchorSlugger')\nMODE.UNIFIED = 'unified'\n\nconst REMOVENUMBER = /^([0-9]+\\\\?\\.)+ +/\n\n/**\n * Parser\n * @constructor\n * @param {Object} options\n * @param {Object} options.renderer - Custom renderer\n */\nfunction Parser (options) {\n  this.tokens = []\n  this.token = null\n  this.count = -1\n  this.indent = []\n  this.options = options || defaults\n  this.options.renderer = this.options.renderer || new Renderer() // jshint ignore:line\n  this.renderer = this.options.renderer\n  this.renderer.options = this.options\n\n  this.anchorMode = [\n    MODE.GHOST,\n    MODE.BITBUCKET,\n    MODE.GITLAB,\n    MODE.GITHUB,\n    MODE.PANDOC,\n    MODE.UNIFIED,\n    MODE.MARKDOWNIT,\n    MODE.MARKED\n  ].map(k => this.options[k] && k).filter(k => k)[0]\n  if (this.anchorMode === MODE.UNIFIED) {\n    this.anchorMode = MODE.GITHUB\n  } this._anchors = new Anchor(this.anchorMode)\n}\n\n/**\n * Parse Loop\n * @param {Array} tokens - Array of {Object} tokens:\n * ```\n * { type: {String} token type,\n *   ...: {*} other values\n * }\n * ```\n * @return {String} parsed output\n */\nParser.prototype.parse = function (tokens) {\n  this.tokens = tokens\n\n  this.updateAutoIdentifier()\n\n  let out = ''\n  while (this.next()) {\n    out += this.tok()\n  }\n\n  return out\n}\n\n/**\n * Next Token\n */\nParser.prototype.next = function () {\n  this.token = this.tokens[this.count += 1]\n  return this.token\n}\n\n/**\n * Preview Next Token\n */\nParser.prototype.peek = function () {\n  return this.tokens[this.count + 1] || 0\n}\n\n/**\n * Parse references\n */\nParser.prototype.references = function () {\n  const refs = []\n  const uniq = {\n    title: {},\n    ref: {}\n  }\n\n  this.tokens.forEach(function (token) {\n    if (token.type === 'def' && !/^#/.test(token.href)) {\n      if (token.title) {\n        uniq.title[token.ref] = token.title\n      } else {\n        uniq.ref[token.ref] = token.ref\n      }\n    }\n  })\n\n  for (let i in uniq.title) {\n    refs.push({\n      ref: i,\n      title: uniq.title[i]\n    })\n  }\n  for (let i in uniq.ref) {\n    if (!uniq.title[i]) {\n      refs.push({\n        ref: i,\n        title: i\n      })\n    }\n  }\n\n  return refs\n}\n\n/**\n * Parse Table of Contents\n */\nParser.prototype.tableOfContents = function () {\n  return this.tokens.filter(token => {\n    if (token.type === 'heading') {\n      return true\n    }\n    return false\n  })\n}\n\n/**\n * Generate a internal reference id (method used by marked)\n *\n * @api private\n * @param {Object} token - parsed token\n * @param {Object} opts - options\n * @param {Boolean} opts.raw - if true use `token.raw` for id generation othewise `token.text` is used\n * @return {String} id\n */\nParser.prototype.headingAutoId = function (token, opts) {\n  opts = opts || {\n    raw: false\n  }\n\n  if (token.anchor) {\n    return token.anchor\n  }\n\n  const inlineText = getInlineAnchorText(token, this.anchorMode)\n  const header = (\n    opts.raw\n      ? token.raw\n      : inlineText || token.text\n  ).replace(/^#/, '')\n  const id = this._anchors.get(header, opts.inc)\n  return id\n}\n\n/**\n * Update Auto Identifiers\n */\nParser.prototype.updateAutoIdentifier = function () {\n  const self = this\n  const headings = {}\n  this._anchors = new Anchor(this.anchorMode)\n\n  // sanitize the id before lookup\n  function prep (id) {\n    id = id.replace(/(?:%20|\\+)/g, ' ')\n    id = self.headingAutoId({ text: id })\n    return id\n  }\n\n  // obtain headings ids\n  this.tokens = this.tokens.map(token => {\n    if (token.type === 'heading') {\n      const raw = this.headingAutoId(token, { raw: true }) // needs to come first because of counter increment\n      let id = this.headingAutoId(token, { inc: true })\n      headings[raw] = '#' + id\n      headings[id] = '#' + id\n      token.autoid = id\n    }\n    return token\n  })\n\n  this.tokens = this.tokens.map(function (token) {\n    let id\n    if (token.inline) {\n      token.inline = token.inline.map(token => {\n        switch (token.type) {\n          case 'link':\n          case 'image':\n          {\n            id = prep(token.href)\n            if (headings[id]) {\n              token.href = headings[id]\n            }\n            break\n          }\n        }\n        return token\n      })\n    } else {\n      switch (token.type) {\n        case 'def':\n        {\n          if (token.href && token.href.indexOf('#') === 0) {\n            id = prep(token.href)\n            if (headings[id]) {\n              token.href = headings[id]\n            }\n            break\n          }\n        }\n      }\n    }\n    return token\n  })\n}\n\n/**\n * Prepare headings text if numberedheadings option is set\n * updates all tokens containing headings\n * @param {Number} maxLevel\n * @param {Number} minLevel\n */\nParser.prototype.numberedHeadings = function (maxLevel, minLevel, skip, start, omit) {\n  const omitMatch = {}\n  let skipFlag = false\n  const numbering = new Numbering(start)\n\n  skip = skip || 0\n\n  ;(omit || []).forEach(function (key) {\n    omitMatch[key] = true\n  })\n\n  maxLevel = maxLevel || defaults.level\n  minLevel = minLevel || defaults.minlevel\n\n  this.tokens = this.tokens.map(token => {\n    if (token.type === 'heading') {\n      token.text = token.text.replace(REMOVENUMBER, '')\n      let tmp = token.raw.replace(REMOVENUMBER, '')\n      if (tmp !== token.raw && token.inline) {\n        // need to re-lex the inline tokens\n        token.inline = new InlineLexer(this.options).lex(tmp)\n      }\n      token.raw = tmp\n\n      if (token.depth === minLevel) {\n        if (skip > 0) {\n          skip -= 1\n          skipFlag = true\n        } else if (skip === 0) {\n          skipFlag = false\n        }\n      }\n\n      if (!skipFlag && !omitMatch[token.raw] && token.depth <= maxLevel && token.depth >= minLevel) {\n        token.number = numbering.count(token.depth - minLevel + 1)\n        const text = token.number + ' '\n        token.text = text + token.text\n        if (token.inline) {\n          token.inline.unshift({ type: 'text', text: text })\n        }\n      }\n    }\n    return token\n  })\n}\n\n/**\n * Parse Current Token\n */\nParser.prototype.tok = function (options) {\n  options = options || {}\n\n  switch (this.token.type) {\n    case 'space':\n    {\n      return this.renderer.newline(this.token.text)\n    }\n    case 'code':\n    {\n      return this.renderer.codeblock(this.token.text)\n    }\n    case 'hr':\n    {\n      return this.renderer.hr(this.token.text)\n    }\n    case 'html':\n    {\n      return this.renderer.html(this.token.text)\n    }\n    case 'paragraph':\n    {\n      let body = ''\n      ;(this.token.inline || []).forEach(token => {\n        body += this.inlinetok(token)\n      })\n      return this.renderer.paragraph(body)\n    }\n    case 'text':\n    {\n      let body = ''\n      ;(this.token.inline || []).forEach(token => {\n        body += this.inlinetok(token)\n      })\n      return this.renderer.text(body)\n    }\n    case 'heading':\n    {\n      return this.renderer.heading(\n        this.token.text,\n        this.token.depth,\n        this.token.raw,\n        this.token.number,\n        this.token.autoid,\n        this.token.anchor)\n    }\n    case 'fences':\n    {\n      return this.renderer.fences(\n        this.token.text,\n        this.token.lang,\n        this.token.indent,\n        this.token.fences\n      )\n    }\n    case 'def':\n    {\n      return this.renderer.reference(this.token.ref,\n        this.token.href, this.token.title)\n    }\n    case 'blockquote_start':\n    {\n      let body = ''\n\n      while (this.next().type !== 'blockquote_end') {\n        body += this.tok()\n      }\n\n      return this.renderer.blockquote(body)\n    }\n    case 'list_start':\n    {\n      let obj\n      let body = ''\n      const ordered = this.token.ordered\n      let start = this.token.start\n\n      while (this.next().type !== 'list_end') {\n        if (this.options.autonumber && ordered) {\n          obj = {\n            start: start++\n          }\n        }\n        body += this.tok(obj)\n      }\n\n      return this.renderer.list(body, ordered)\n    }\n    case 'list_item_start':\n    {\n      let body = ''\n      let bullet = this.token.text\n      if (options.start) {\n        bullet = options.start + '.'\n      }\n      while (this.next().type !== 'list_item_end') {\n        body += this.tok()\n      }\n\n      return this.renderer.listitem(bullet, body)\n    }\n    case 'loose_item_start':\n    {\n      let body = ''\n      let bullet = this.token.text\n      if (options.start) {\n        bullet = options.start + '.'\n      }\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.tok()\n      }\n\n      return this.renderer.listitem(bullet, body)\n    }\n    case 'ppnumberedheadings':\n    {\n      this.options.numberedHeadings = true\n      this.numberedHeadings(\n        this.token.level,\n        this.token.minlevel,\n        this.token.skip,\n        this.token.start,\n        this.token.omit\n      )\n      this.updateAutoIdentifier()\n      return this.renderer.numberedHeadings(\n        this.token.level,\n        this.token.minlevel,\n        this.token.skip,\n        this.token.start,\n        this.token.omit\n      )\n    }\n    case 'ppref':\n    {\n      return this.renderer.references(this.references())\n    }\n    case 'ppinclude_start':\n    {\n      let body = ''\n      if (this.token.tags) {\n        const indent = this.token.indent.replace('\\t', '    ').length\n        body += '<!-- include (' + this.token.text.replace(/ /g, '\\\\ ') +\n            (this.token.lang ? ' lang=' + this.token.lang : '') +\n            (indent ? ' indent=' + indent.toString() : '') +\n            ') -->\\n'\n      }\n      if (typeof this.token.lang === 'string') {\n        body += this.renderer.fence(this.token.lang)\n      }\n      return body\n    }\n    case 'ppinclude_end':\n    {\n      let body = ''\n      if (typeof this.token.lang === 'string') {\n        body += this.renderer.fence()\n      }\n      if (this.token.tags) {\n        body += '<!-- /include -->\\n'\n      }\n      return body\n    }\n    case 'ppinclude':\n    {\n      return this.renderer.include(this.token.text, this.token.indent, this.token.lang)\n    }\n    case 'pptoc':\n    {\n      return this.renderer.tableOfContents(\n        this.tableOfContents(),\n        this.token)\n    }\n    default:\n    {\n      return '<!-- ' + JSON.stringify(this.token) + ' -->\\n'\n    }\n  }\n}\n\n/**\n * Parse inline tokens\n */\nParser.prototype.inlinetok = function (token) {\n  switch (token.type) {\n    case 'escape':\n    {\n      return this.renderer.escape(token.text)\n    }\n    case 'url':\n    {\n      return this.renderer.url(token.text)\n    }\n    case 'tag':\n    {\n      return this.renderer.tag(token.text)\n    }\n    case 'link':\n    {\n      return this.renderer.link(token.raw, token.text, token.href, token.title)\n    }\n    case 'reflink':\n    {\n      return this.renderer.reflink(token.raw, token.text, token.ref)\n    }\n    case 'nolink':\n    {\n      return this.renderer.nolink(token.raw, token.text)\n    }\n    case 'image':\n    {\n      return this.renderer.image(token.raw, token.text, token.href, token.title)\n    }\n    case 'refimage':\n    {\n      return this.renderer.refimage(token.raw, token.text, token.ref)\n    }\n    case 'noimage':\n    {\n      return this.renderer.noimage(token.raw, token.text)\n    }\n    case 'strong':\n    {\n      return this.renderer.strong(token.text, token.char)\n    }\n    case 'em':\n    {\n      return this.renderer.em(token.text, token.char)\n    }\n    case 'text':\n    {\n      return this.renderer.text(token.text)\n    }\n    case 'code':\n    {\n      return this.renderer.code(token.text)\n    }\n    case 'br':\n    {\n      return this.renderer.br(token.text)\n    }\n    case 'del':\n    {\n      return this.renderer.del(token.text)\n    }\n    default:\n    {\n      return '<!-- ' + JSON.stringify(this.token) + ' -->\\n'\n    }\n  }\n}\n\n/**\n * Static Parse Method\n * @param {Array} toc - Array of Objects of type:\n * ```\n * { text: {String} Name of Heading,\n *   depth: {Number} Level of Heading,\n *   raw: {String} Raw Name of Heading\n * }\n * ```\n * @param {Object} options - options\n * @return {String} preprocessed markdown\n */\nParser.parse = function (tokens, options) {\n  const parser = new Parser(options)\n  return parser.parse(tokens)\n}\n\n/**\n * @api private\n */\nfunction getInlineAnchorText (token, mode) {\n  if (token.inline) {\n    let text = token.inline.map(token => {\n      let text = token.text\n\n      // sanitation for different anchor modes\n      if (mode === MODE.MARKDOWNIT && token.type === 'code') {\n        text = text.replace(/`/g, '')\n      } else if ([MODE.GITHUB, MODE.GITLAB, MODE.PANDOC].includes(mode) && token.type === 'tag') {\n        text = ''\n      } else if (mode === MODE.BITBUCKET && token.type === 'escape') {\n        text = '\\\\' + text\n      }\n\n      return text\n    }).join('')\n\n    if (mode === MODE.PANDOC) { // no numbering!\n      text = text.replace(REMOVENUMBER, '')\n    }\n    return text\n  }\n}\n\nmodule.exports = Parser\n","const { slugger, MODE } = require('./anchorSlugger')\n\nclass Anchor {\n  constructor (mode = MODE.MARKED) {\n    this._counters = {}\n    this._mode = mode\n    this._startCnt = 0\n\n    switch (mode) {\n      case MODE.BITBUCKET:\n        this._fn = (...args) => this._inc('_', ...args)\n        break\n      case MODE.GITHUB:\n      case MODE.GITLAB:\n      case MODE.PANDOC:\n      case MODE.MARKED:\n        this._fn = (...args) => this._inc('-', ...args)\n        break\n      case MODE.MARKDOWNIT:\n        this._startCnt = 1\n        this._fn = (...args) => this._inc('-', ...args)\n        break\n      case MODE.GHOST:\n        // repetitions not supported\n        this._fn = (id) => id\n        break\n      default:\n        throw new Error('Unknown mode: ' + mode)\n    }\n  }\n\n  _inc (sep, id, isInc) {\n    if (!this._counters[id]) this._counters[id] = 0\n    const cnt = this._counters[id]\n    if (isInc) {\n      if (!cnt) this._counters[id] = this._startCnt\n      this._counters[id] += 1\n    }\n    return cnt ? id + sep + cnt : id\n  }\n\n  get (header, isInc) {\n    const id = slugger(header, this._mode)\n    return this._fn(id, isInc)\n  }\n}\n\nmodule.exports = Anchor\n","\"use strict\";\n\nmodule.exports = function () {\n  // https://mths.be/emoji\n  return /\\uD83C\\uDFF4\\uDB40\\uDC67\\uDB40\\uDC62(?:\\uDB40\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67|\\uDB40\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDB40\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73)\\uDB40\\uDC7F|\\uD83D\\uDC68(?:\\uD83C\\uDFFC\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C\\uDFFB|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFE])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFE\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFD])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFC])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83D\\uDC68|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D[\\uDC66\\uDC67])|[\\u2695\\u2696\\u2708]\\uFE0F|\\uD83D[\\uDC66\\uDC67]|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|(?:\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708])\\uFE0F|\\uD83C\\uDFFB\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C[\\uDFFB-\\uDFFF])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFB\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFC\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)\\uD83C\\uDFFB|\\uD83E\\uDDD1(?:\\uD83C\\uDFFF\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])|\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1)|(?:\\uD83E\\uDDD1\\uD83C\\uDFFE\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFF\\u200D\\uD83E\\uDD1D\\u200D(?:\\uD83D[\\uDC68\\uDC69]))(?:\\uD83C[\\uDFFB-\\uDFFE])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFC\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFD\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)(?:\\uD83C[\\uDFFB\\uDFFC])|\\uD83D\\uDC69(?:\\uD83C\\uDFFE\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFC\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFB\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFC-\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D(?:\\uD83D[\\uDC68\\uDC69])|\\uD83D[\\uDC68\\uDC69])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]))|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|(?:\\uD83E\\uDDD1\\uD83C\\uDFFD\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFE\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)(?:\\uD83C[\\uDFFB-\\uDFFD])|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D[\\uDC66\\uDC67])|(?:\\uD83D\\uDC41\\uFE0F\\u200D\\uD83D\\uDDE8|\\uD83D\\uDC69(?:\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\u200D[\\u2695\\u2696\\u2708])|(?:(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)\\uFE0F|\\uD83D\\uDC6F|\\uD83E[\\uDD3C\\uDDDE\\uDDDF])\\u200D[\\u2640\\u2642]|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD6-\\uDDDD])(?:(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|\\u200D[\\u2640\\u2642])|\\uD83C\\uDFF4\\u200D\\u2620)\\uFE0F|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83C\\uDFF3\\uFE0F\\u200D\\uD83C\\uDF08|\\uD83D\\uDC15\\u200D\\uD83E\\uDDBA|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67|\\uD83C\\uDDFD\\uD83C\\uDDF0|\\uD83C\\uDDF4\\uD83C\\uDDF2|\\uD83C\\uDDF6\\uD83C\\uDDE6|[#\\*0-9]\\uFE0F\\u20E3|\\uD83C\\uDDE7(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDF9(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF])|\\uD83C\\uDDEA(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA])|\\uD83E\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDDF7(?:\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC])|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDDF2(?:\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF])|\\uD83C\\uDDE6(?:\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF])|\\uD83C\\uDDF0(?:\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDED(?:\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA])|\\uD83C\\uDDE9(?:\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF])|\\uD83C\\uDDFE(?:\\uD83C[\\uDDEA\\uDDF9])|\\uD83C\\uDDEC(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE])|\\uD83C\\uDDF8(?:\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF])|\\uD83C\\uDDEB(?:\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7])|\\uD83C\\uDDF5(?:\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE])|\\uD83C\\uDDFB(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA])|\\uD83C\\uDDF3(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF])|\\uD83C\\uDDE8(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF])|\\uD83C\\uDDF1(?:\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE])|\\uD83C\\uDDFF(?:\\uD83C[\\uDDE6\\uDDF2\\uDDFC])|\\uD83C\\uDDFC(?:\\uD83C[\\uDDEB\\uDDF8])|\\uD83C\\uDDFA(?:\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF])|\\uD83C\\uDDEE(?:\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9])|\\uD83C\\uDDEF(?:\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5])|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2\\uDFC7]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC6B-\\uDC6D\\uDC70\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDCAA\\uDD74\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC]|\\uD83E[\\uDD0F\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD30-\\uDD36\\uDDB5\\uDDB6\\uDDBB\\uDDD2-\\uDDD5])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDED5\\uDEEB\\uDEEC\\uDEF4-\\uDEFA\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDDFF\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95])|(?:[#\\*0-9\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u261D\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u265F\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267E\\u267F\\u2692-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D3\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF]|\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73-\\uDD7A\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95\\uDD96\\uDDA4\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED2\\uDED5\\uDEE0-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3-\\uDEFA\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDDFF\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95])\\uFE0F|(?:[\\u261D\\u26F9\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2-\\uDFC4\\uDFC7\\uDFCA-\\uDFCC]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66-\\uDC78\\uDC7C\\uDC81-\\uDC83\\uDC85-\\uDC87\\uDC8F\\uDC91\\uDCAA\\uDD74\\uDD75\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE45-\\uDE47\\uDE4B-\\uDE4F\\uDEA3\\uDEB4-\\uDEB6\\uDEC0\\uDECC]|\\uD83E[\\uDD0F\\uDD18-\\uDD1F\\uDD26\\uDD30-\\uDD39\\uDD3C-\\uDD3E\\uDDB5\\uDDB6\\uDDB8\\uDDB9\\uDDBB\\uDDCD-\\uDDCF\\uDDD1-\\uDDDD])/g;\n};\n","module.exports = {\n  XmlEntities: require('./lib/xml-entities.js'),\n  Html4Entities: require('./lib/html4-entities.js'),\n  Html5Entities: require('./lib/html5-entities.js'),\n  AllHtmlEntities: require('./lib/html5-entities.js')\n};\n","var ALPHA_INDEX = {\n    '&lt': '<',\n    '&gt': '>',\n    '&quot': '\"',\n    '&apos': '\\'',\n    '&amp': '&',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&quot;': '\"',\n    '&apos;': '\\'',\n    '&amp;': '&'\n};\n\nvar CHAR_INDEX = {\n    60: 'lt',\n    62: 'gt',\n    34: 'quot',\n    39: 'apos',\n    38: 'amp'\n};\n\nvar CHAR_S_INDEX = {\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    '\\'': '&apos;',\n    '&': '&amp;'\n};\n\n/**\n * @constructor\n */\nfunction XmlEntities() {}\n\n/**\n * @param {String} str\n * @returns {String}\n */\nXmlEntities.prototype.encode = function(str) {\n    if (!str || !str.length) {\n        return '';\n    }\n    return str.replace(/<|>|\"|'|&/g, function(s) {\n        return CHAR_S_INDEX[s];\n    });\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\n XmlEntities.encode = function(str) {\n    return new XmlEntities().encode(str);\n };\n\n/**\n * @param {String} str\n * @returns {String}\n */\nXmlEntities.prototype.decode = function(str) {\n    if (!str || !str.length) {\n        return '';\n    }\n    return str.replace(/&#?[0-9a-zA-Z]+;?/g, function(s) {\n        if (s.charAt(1) === '#') {\n            var code = s.charAt(2).toLowerCase() === 'x' ?\n                parseInt(s.substr(3), 16) :\n                parseInt(s.substr(2));\n\n            if (isNaN(code) || code < -32768 || code > 65535) {\n                return '';\n            }\n            return String.fromCharCode(code);\n        }\n        return ALPHA_INDEX[s] || s;\n    });\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\n XmlEntities.decode = function(str) {\n    return new XmlEntities().decode(str);\n };\n\n/**\n * @param {String} str\n * @returns {String}\n */\nXmlEntities.prototype.encodeNonUTF = function(str) {\n    if (!str || !str.length) {\n        return '';\n    }\n    var strLength = str.length;\n    var result = '';\n    var i = 0;\n    while (i < strLength) {\n        var c = str.charCodeAt(i);\n        var alpha = CHAR_INDEX[c];\n        if (alpha) {\n            result += \"&\" + alpha + \";\";\n            i++;\n            continue;\n        }\n        if (c < 32 || c > 126) {\n            result += '&#' + c + ';';\n        } else {\n            result += str.charAt(i);\n        }\n        i++;\n    }\n    return result;\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\n XmlEntities.encodeNonUTF = function(str) {\n    return new XmlEntities().encodeNonUTF(str);\n };\n\n/**\n * @param {String} str\n * @returns {String}\n */\nXmlEntities.prototype.encodeNonASCII = function(str) {\n    if (!str || !str.length) {\n        return '';\n    }\n    var strLenght = str.length;\n    var result = '';\n    var i = 0;\n    while (i < strLenght) {\n        var c = str.charCodeAt(i);\n        if (c <= 255) {\n            result += str[i++];\n            continue;\n        }\n        result += '&#' + c + ';';\n        i++;\n    }\n    return result;\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\n XmlEntities.encodeNonASCII = function(str) {\n    return new XmlEntities().encodeNonASCII(str);\n };\n\nmodule.exports = XmlEntities;\n","var HTML_ALPHA = ['apos', 'nbsp', 'iexcl', 'cent', 'pound', 'curren', 'yen', 'brvbar', 'sect', 'uml', 'copy', 'ordf', 'laquo', 'not', 'shy', 'reg', 'macr', 'deg', 'plusmn', 'sup2', 'sup3', 'acute', 'micro', 'para', 'middot', 'cedil', 'sup1', 'ordm', 'raquo', 'frac14', 'frac12', 'frac34', 'iquest', 'Agrave', 'Aacute', 'Acirc', 'Atilde', 'Auml', 'Aring', 'Aelig', 'Ccedil', 'Egrave', 'Eacute', 'Ecirc', 'Euml', 'Igrave', 'Iacute', 'Icirc', 'Iuml', 'ETH', 'Ntilde', 'Ograve', 'Oacute', 'Ocirc', 'Otilde', 'Ouml', 'times', 'Oslash', 'Ugrave', 'Uacute', 'Ucirc', 'Uuml', 'Yacute', 'THORN', 'szlig', 'agrave', 'aacute', 'acirc', 'atilde', 'auml', 'aring', 'aelig', 'ccedil', 'egrave', 'eacute', 'ecirc', 'euml', 'igrave', 'iacute', 'icirc', 'iuml', 'eth', 'ntilde', 'ograve', 'oacute', 'ocirc', 'otilde', 'ouml', 'divide', 'oslash', 'ugrave', 'uacute', 'ucirc', 'uuml', 'yacute', 'thorn', 'yuml', 'quot', 'amp', 'lt', 'gt', 'OElig', 'oelig', 'Scaron', 'scaron', 'Yuml', 'circ', 'tilde', 'ensp', 'emsp', 'thinsp', 'zwnj', 'zwj', 'lrm', 'rlm', 'ndash', 'mdash', 'lsquo', 'rsquo', 'sbquo', 'ldquo', 'rdquo', 'bdquo', 'dagger', 'Dagger', 'permil', 'lsaquo', 'rsaquo', 'euro', 'fnof', 'Alpha', 'Beta', 'Gamma', 'Delta', 'Epsilon', 'Zeta', 'Eta', 'Theta', 'Iota', 'Kappa', 'Lambda', 'Mu', 'Nu', 'Xi', 'Omicron', 'Pi', 'Rho', 'Sigma', 'Tau', 'Upsilon', 'Phi', 'Chi', 'Psi', 'Omega', 'alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta', 'eta', 'theta', 'iota', 'kappa', 'lambda', 'mu', 'nu', 'xi', 'omicron', 'pi', 'rho', 'sigmaf', 'sigma', 'tau', 'upsilon', 'phi', 'chi', 'psi', 'omega', 'thetasym', 'upsih', 'piv', 'bull', 'hellip', 'prime', 'Prime', 'oline', 'frasl', 'weierp', 'image', 'real', 'trade', 'alefsym', 'larr', 'uarr', 'rarr', 'darr', 'harr', 'crarr', 'lArr', 'uArr', 'rArr', 'dArr', 'hArr', 'forall', 'part', 'exist', 'empty', 'nabla', 'isin', 'notin', 'ni', 'prod', 'sum', 'minus', 'lowast', 'radic', 'prop', 'infin', 'ang', 'and', 'or', 'cap', 'cup', 'int', 'there4', 'sim', 'cong', 'asymp', 'ne', 'equiv', 'le', 'ge', 'sub', 'sup', 'nsub', 'sube', 'supe', 'oplus', 'otimes', 'perp', 'sdot', 'lceil', 'rceil', 'lfloor', 'rfloor', 'lang', 'rang', 'loz', 'spades', 'clubs', 'hearts', 'diams'];\nvar HTML_CODES = [39, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 34, 38, 60, 62, 338, 339, 352, 353, 376, 710, 732, 8194, 8195, 8201, 8204, 8205, 8206, 8207, 8211, 8212, 8216, 8217, 8218, 8220, 8221, 8222, 8224, 8225, 8240, 8249, 8250, 8364, 402, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 977, 978, 982, 8226, 8230, 8242, 8243, 8254, 8260, 8472, 8465, 8476, 8482, 8501, 8592, 8593, 8594, 8595, 8596, 8629, 8656, 8657, 8658, 8659, 8660, 8704, 8706, 8707, 8709, 8711, 8712, 8713, 8715, 8719, 8721, 8722, 8727, 8730, 8733, 8734, 8736, 8743, 8744, 8745, 8746, 8747, 8756, 8764, 8773, 8776, 8800, 8801, 8804, 8805, 8834, 8835, 8836, 8838, 8839, 8853, 8855, 8869, 8901, 8968, 8969, 8970, 8971, 9001, 9002, 9674, 9824, 9827, 9829, 9830];\n\nvar alphaIndex = {};\nvar numIndex = {};\n\nvar i = 0;\nvar length = HTML_ALPHA.length;\nwhile (i < length) {\n    var a = HTML_ALPHA[i];\n    var c = HTML_CODES[i];\n    alphaIndex[a] = String.fromCharCode(c);\n    numIndex[c] = a;\n    i++;\n}\n\n/**\n * @constructor\n */\nfunction Html4Entities() {}\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml4Entities.prototype.decode = function(str) {\n    if (!str || !str.length) {\n        return '';\n    }\n    return str.replace(/&(#?[\\w\\d]+);?/g, function(s, entity) {\n        var chr;\n        if (entity.charAt(0) === \"#\") {\n            var code = entity.charAt(1).toLowerCase() === 'x' ?\n                parseInt(entity.substr(2), 16) :\n                parseInt(entity.substr(1));\n\n            if (!(isNaN(code) || code < -32768 || code > 65535)) {\n                chr = String.fromCharCode(code);\n            }\n        } else {\n            chr = alphaIndex[entity];\n        }\n        return chr || s;\n    });\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml4Entities.decode = function(str) {\n    return new Html4Entities().decode(str);\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml4Entities.prototype.encode = function(str) {\n    if (!str || !str.length) {\n        return '';\n    }\n    var strLength = str.length;\n    var result = '';\n    var i = 0;\n    while (i < strLength) {\n        var alpha = numIndex[str.charCodeAt(i)];\n        result += alpha ? \"&\" + alpha + \";\" : str.charAt(i);\n        i++;\n    }\n    return result;\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml4Entities.encode = function(str) {\n    return new Html4Entities().encode(str);\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml4Entities.prototype.encodeNonUTF = function(str) {\n    if (!str || !str.length) {\n        return '';\n    }\n    var strLength = str.length;\n    var result = '';\n    var i = 0;\n    while (i < strLength) {\n        var cc = str.charCodeAt(i);\n        var alpha = numIndex[cc];\n        if (alpha) {\n            result += \"&\" + alpha + \";\";\n        } else if (cc < 32 || cc > 126) {\n            result += \"&#\" + cc + \";\";\n        } else {\n            result += str.charAt(i);\n        }\n        i++;\n    }\n    return result;\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml4Entities.encodeNonUTF = function(str) {\n    return new Html4Entities().encodeNonUTF(str);\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml4Entities.prototype.encodeNonASCII = function(str) {\n    if (!str || !str.length) {\n        return '';\n    }\n    var strLength = str.length;\n    var result = '';\n    var i = 0;\n    while (i < strLength) {\n        var c = str.charCodeAt(i);\n        if (c <= 255) {\n            result += str[i++];\n            continue;\n        }\n        result += '&#' + c + ';';\n        i++;\n    }\n    return result;\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml4Entities.encodeNonASCII = function(str) {\n    return new Html4Entities().encodeNonASCII(str);\n};\n\nmodule.exports = Html4Entities;\n"],"sourceRoot":""}