"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('./anchorSlugger'),
    slugger = _require.slugger,
    MODE = _require.MODE;

var Anchor =
/*#__PURE__*/
function () {
  function Anchor() {
    var _this = this;

    var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MODE.MARKED;

    _classCallCheck(this, Anchor);

    this._counters = {};
    this._mode = mode;
    this._startCnt = 0;

    switch (mode) {
      case MODE.BITBUCKET:
        this._fn = function () {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return _this._inc.apply(_this, ['_'].concat(args));
        };

        break;

      case MODE.GITHUB:
      case MODE.GITLAB:
      case MODE.PANDOC:
      case MODE.MARKED:
        this._fn = function () {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          return _this._inc.apply(_this, ['-'].concat(args));
        };

        break;

      case MODE.MARKDOWNIT:
        this._startCnt = 1;

        this._fn = function () {
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }

          return _this._inc.apply(_this, ['-'].concat(args));
        };

        break;

      case MODE.GHOST:
        // repetitions not supported
        this._fn = function (id) {
          return id;
        };

        break;

      default:
        throw new Error('Unknown mode: ' + mode);
    }
  }

  _createClass(Anchor, [{
    key: "_inc",
    value: function _inc(sep, id, isInc) {
      if (!this._counters[id]) this._counters[id] = 0;
      var cnt = this._counters[id];

      if (isInc) {
        if (!cnt) this._counters[id] = this._startCnt;
        this._counters[id] += 1;
      }

      return cnt ? id + sep + cnt : id;
    }
  }, {
    key: "get",
    value: function get(header, isInc) {
      var id = slugger(header, this._mode);
      return this._fn(id, isInc);
    }
  }]);

  return Anchor;
}();

module.exports = Anchor;