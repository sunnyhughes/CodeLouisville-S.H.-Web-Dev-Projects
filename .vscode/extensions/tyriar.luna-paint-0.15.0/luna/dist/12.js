"use strict";(self.webpackChunkluna=self.webpackChunkluna||[]).push([[12],{51:(e,t,a)=>{a.r(t),a.d(t,{parseChunk:()=>s});var n=a(6),r=a(52),i=a(47);function s(e,t,a){(0,n.assertChunkSinglular)(e,a),(0,n.assertChunkPrecedes)(e,a,"IDAT"),(0,n.assertChunkDataLengthGte)(e,a,4);const s=a.offset+4+4,o=s+a.dataLength;let c=s;const d=new TextDecoder("latin1");let u;u=(0,i.readText)(e,a,d,79,c,o,!0),c+=u.bytesRead;const h=u.text,l=e.view.getInt32(c);c+=4;const p=e.view.getInt32(c);c+=4;const f=e.view.getUint8(c++);let g;switch(f){case 0:g="linear-mapping";break;case 1:g="base-e exponential mapping";break;case 2:g="arbitrary-base exponential mapping";break;case 3:g="hyperbolic mapping";break;default:throw(0,n.createChunkDecodeWarning)(a,`Invalid equation type "${f}"`,c)}const b=e.view.getUint8(c++);u=(0,i.readText)(e,a,d,79,c,o,!0),c+=u.bytesRead;const w=u.text,k=[];let x;for(let t=0;t<b;t++)x=(0,r.readFloat)(e,a,d,c,o,t<b-1),c+=x.bytesRead,k.push(x.value);return{type:"pCAL",calibrationName:h,x0:l,x1:p,equationType:g,unitName:w,params:k}}},52:(e,t,a)=>{a.r(t),a.d(t,{readFloat:()=>i});var n=a(6),r=a(47);function i(e,t,a,i,s,o){const c=(0,r.readText)(e,t,a,void 0,i,s,o);var d;i+=c.bytesRead,(d=c.text).match(/^[+-]?[0-9]+\.[0-9]+([eE][+-]?[0-9]+)?$/)||d.match(/^[+-]?[0-9]+\.?([eE][+-]?[0-9]+)?$/)||d.match(/^[+-]?\.[0-9]+([eE][+-]?[0-9]+)?$/)||(0,n.handleWarning)(e,(0,n.createChunkDecodeWarning)(t,`Invalid character in floating point number ("${c.text}")`,i));const u=parseFloat(c.text);return{bytesRead:c.bytesRead,value:u}}},47:(e,t,a)=>{a.r(t),a.d(t,{readText:()=>i});var n=a(25),r=a(6);function i(e,t,a,i,s,o,c,d){const u=[];let h=0,l=0;for(;(void 0===i||l<i)&&(c||s!==o);l++){try{h=e.view.getUint8(s)}catch(e){if(e instanceof Error&&"Offset is outside the bounds of the DataView"===e.message)throw(0,r.createChunkDecodeWarning)(t,"EOF while reading text",s);throw e}if(!d&&0===h)break;s++,u.push(h)}if(c&&0!==e.view.getUint8(s))throw(0,r.createChunkDecodeWarning)(t,"No null character after text",s);let p=new Uint8Array(u);if(d){const e=new n.Inflate;if(e.push(p),e.err)throw(0,r.createChunkDecodeWarning)(t,`Inflate error: ${e.msg}`,s);p=e.result}return{text:a?a.decode(p):String.fromCharCode(...u),bytesRead:l+1}}}}]);