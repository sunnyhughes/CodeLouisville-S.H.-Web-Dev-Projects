"use strict";(self.webpackChunkluna=self.webpackChunkluna||[]).push([[23],{60:(e,t,a)=>{a.r(t),a.d(t,{parseChunk:()=>n});var s=a(6);function n(e,t,a){switch((0,s.assertChunkPrecedes)(e,a,"IDAT"),t.colorType){case 0:(0,s.assertChunkDataLengthEquals)(e,a,2);break;case 2:(0,s.assertChunkDataLengthEquals)(e,a,6);break;case 3:if((0,s.assertChunkFollows)(e,a,"PLTE"),a.dataLength>e.palette.size)throw(0,s.createChunkDecodeWarning)(a,`Invalid data length for color type ${t.colorType}: ${a.dataLength} > ${e.palette.size}`,a.offset+4+4);break;case 4:case 6:throw(0,s.createChunkDecodeWarning)(a,`Chunk invalid when color type has alpha (${t.colorType})`,a.offset+4+4)}const n=a.offset+4+4;let r;switch(t.colorType){case 0:r=e.view.getUint16(n);break;case 2:r=[e.view.getUint16(n),e.view.getUint16(n+2),e.view.getUint16(n+4)];break;case 3:r=[];for(let t=0;t<a.dataLength;t++)r.push(e.view.getUint8(n+t))}return{type:"tRNS",transparency:r}}}}]);