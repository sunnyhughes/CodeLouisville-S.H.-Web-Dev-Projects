"use strict";(self.webpackChunkluna=self.webpackChunkluna||[]).push([[6],{42:(e,n,t)=>{t.r(n),t.d(n,{parseChunk:()=>r});var i=t(6);function r(e,n,t){(0,i.assertChunkSinglular)(e,t),(0,i.assertChunkPrecedes)(e,t,"PLTE"),(0,i.assertChunkPrecedes)(e,t,"IDAT"),(0,i.assertChunkDataLengthEquals)(e,t,32);let r=t.offset+4+4;const a={x:e.view.getUint32(r)/1e5,y:e.view.getUint32(r+4)/1e5};if(a.x>1||a.y>1)throw(0,i.createChunkDecodeWarning)(t,`Invalid white point (${a.x},${a.y})`,r);r+=8;const s={x:e.view.getUint32(r)/1e5,y:e.view.getUint32(r+4)/1e5};if(s.x>1||s.y>1)throw(0,i.createChunkDecodeWarning)(t,`Invalid red (${s.x},${s.y})`,r);r+=8;const u={x:e.view.getUint32(r)/1e5,y:e.view.getUint32(r+4)/1e5};if(u.x>1||u.y>1)throw(0,i.createChunkDecodeWarning)(t,`Invalid green (${u.x},${u.y})`,r);r+=8;const c={x:e.view.getUint32(r)/1e5,y:e.view.getUint32(r+4)/1e5};if(c.x>1||c.y>1)throw(0,i.createChunkDecodeWarning)(t,`Invalid blue (${c.x},${c.y})`,r);return{type:"cHRM",whitePoint:a,red:s,green:u,blue:c}}}}]);