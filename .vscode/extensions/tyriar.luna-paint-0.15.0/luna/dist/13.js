"use strict";(self.webpackChunkluna=self.webpackChunkluna||[]).push([[13],{55:(e,t,a)=>{a.r(t),a.d(t,{parseChunk:()=>i});var n=a(6),r=a(52);function i(e,t,a){(0,n.assertChunkSinglular)(e,a),(0,n.assertChunkPrecedes)(e,a,"IDAT"),(0,n.assertChunkDataLengthGte)(e,a,4);const i=a.offset+4+4,s=i+a.dataLength;let o=i;const c=new TextDecoder("latin1"),u=e.view.getUint8(o);let d,h;switch(u){case 0:d="meter";break;case 1:d="radian";break;default:throw(0,n.createChunkDecodeWarning)(a,`Invalid sCAL unit type ("${u}")`,o)}o++,h=(0,r.readFloat)(e,a,c,o,s,!0),o+=h.bytesRead;const l=h.value;h=(0,r.readFloat)(e,a,c,o,s,!1),o+=h.bytesRead;const f=h.value;if(l<0||f<0)throw(0,n.createChunkDecodeWarning)(a,`Values cannot be negative (${l}, ${f})`,o);return{type:"sCAL",pixelsPerUnit:{x:l,y:f},unitType:d}}},52:(e,t,a)=>{a.r(t),a.d(t,{readFloat:()=>i});var n=a(6),r=a(47);function i(e,t,a,i,s,o){const c=(0,r.readText)(e,t,a,void 0,i,s,o);var u;i+=c.bytesRead,(u=c.text).match(/^[+-]?[0-9]+\.[0-9]+([eE][+-]?[0-9]+)?$/)||u.match(/^[+-]?[0-9]+\.?([eE][+-]?[0-9]+)?$/)||u.match(/^[+-]?\.[0-9]+([eE][+-]?[0-9]+)?$/)||(0,n.handleWarning)(e,(0,n.createChunkDecodeWarning)(t,`Invalid character in floating point number ("${c.text}")`,i));const d=parseFloat(c.text);return{bytesRead:c.bytesRead,value:d}}},47:(e,t,a)=>{a.r(t),a.d(t,{readText:()=>i});var n=a(25),r=a(6);function i(e,t,a,i,s,o,c,u){const d=[];let h=0,l=0;for(;(void 0===i||l<i)&&(c||s!==o);l++){try{h=e.view.getUint8(s)}catch(e){if(e instanceof Error&&"Offset is outside the bounds of the DataView"===e.message)throw(0,r.createChunkDecodeWarning)(t,"EOF while reading text",s);throw e}if(!u&&0===h)break;s++,d.push(h)}if(c&&0!==e.view.getUint8(s))throw(0,r.createChunkDecodeWarning)(t,"No null character after text",s);let f=new Uint8Array(d);if(u){const e=new n.Inflate;if(e.push(f),e.err)throw(0,r.createChunkDecodeWarning)(t,`Inflate error: ${e.msg}`,s);f=e.result}return{text:a?a.decode(f):String.fromCharCode(...d),bytesRead:l+1}}}}]);